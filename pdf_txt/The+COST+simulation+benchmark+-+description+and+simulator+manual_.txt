The COST
Simulation Benchmark :
Description and Simulator Manual
(a product of COST Action 624 & COST Action 682)
Edited by John B. CoppiPreface
This publication focuses on the COST ‘simulation benchmark’ , which has been produced as a direct
result of co-operation facilitated by two COST Actions. COST Action 682 'Integrated WastewaterManagement" (1992-1998) focused on biological wastewater treatment processes and the optimisationof design and operation based of dynamic process models.  The current COST Action, 624, is dedicatedto the optimisation of performance and cost-effectiveness of wastewater management systems.  Toaccomplish this goal, the Action is focussing on increasing the knowledge of microbial systems and byimplementation of integrated plant-wide control based on a description of the entire wastewater system,
thereby providing new concepts for dealing with wastewater in a future sustainable society.
COST Mission:
Founded in 1971, COST is an intergovernmental framework for European Co-operation in the
field of Scientific and Technical Research, allowing the co-ordination of nationally funded
research on a European level. COST Actions cover basic and pre-competitive research as well as
activities of public utility.
The goal of COST is to ensure that Europe holds a strong position in the field of scientific and
technical research for peaceful purposes, by increasing European co-operation and interaction in
this field.  COST has developed into one of the largest frameworks for research co-operation in
Europe and is a valuable mechanism for co-ordinating national research activities in Europe.
Today it has almost 200 Actions and involves nearly 30,000 scientists from 32 European
member countries and more than 50 participating institutions from 14 different countries.
The ‘simulation benchmark’  described in this publication is a fully defined simulation protocol and was
developed as a tool for evaluating activated sludge wastewater treatment control strategies.  Thiscomprehensive tool has taken several years to develop and is truly the result of a group effort.  Over theyears, many people have contributed to the benchmark’s development, but unfortunately not all ofthose people have been able to contribute to the production of this publication.  Nevertheless, thoseindividuals should be fully acknowledged for their work and input. The following is a list of all thepeople who have worked on the benchmark project.
Jens Alex Karel Keesman
Jean-Francois Beteau S. Marsili-LibelliPeppe Bortone Khanh NguyenBengt Carlsson Gustaf OlssonJohn B. Copp Gilles Patry
Denis Dochain Marie-Noelle Pons
Jeremy Dudley Antonio SalterainSylvie Gillot Henri SpanjersChris Hellinga Imre Takács
Nadja Hvala Henk VanhoorenMatty Janssen Peter Vanrolleghem
Ulf Jeppsson Mario Zec
In addition to those mentioned above special recognition should go to Dr. Ulf Jeppsson whose ‘quality
control’ and troubleshooting efforts were instrumental in identifying and solving many of the problemsiipresented in the simulation chapters of this book.  Further, Dr. Jeppsson should also be recognised for
verifying (in some cases) and compiling many of the results that appear in this publication.  Dr. Marie-Noelle Pons should also be recognised for her ongoing efforts with respect to the ‘simulation
benchmark’  and the maintenance of the COST web page, which has been the forum for disseminating
benchmark information to this point.
The first sections of this book provide an introduction to the ‘simulation benchmark’  including the
rationale behind its development and a complete description of the benchmark as it is currently defined.The later sections deal with use of the benchmark, and specifically with the implementation of thebenchmark in a number of simulation platforms.  Experience tells us that commercially availablesimulation software packages have specific features that can impact on the benchmark implementation.This publication is intended as a means to disseminate the lessons we have learned about specific
platforms and make the ‘simulation benchmark’  implementation easier for new users.  A substantial
effort has gone into verifying the steady state and dynamic output data included in the ‘simulation
benchmark’  description.  So far, these results have been verified using BioWin™, EFOR™, GPS-X ,
Matlab/Simulink™, Simba™, STOAT™, WEST™ and a user defined FORTRAN code (Alex et al.,
1999; Pons et al., 1999).  Although this process of cross-platform testing has been a time consumingexercise, it has provided a means to develop a significant insight into the simulators and the simulationprocess.  Further, as each of the simulators requires a different method of implementation, each of thesimulators has required simulator-specific alterations and fine-tuning to get agreement in the outputdata.  Knowledge of these simulator-specific alterations is crucial for benchmark use.  So, to facilitatethe transfer of that knowledge to interested parties, this publication was devised.
Editor
John B. CoppiiiTable of Contents
Preface........................................................................................................................ ..............................i
1 Benchmark Rationale.......................................................................................................... ..................1
2 Simulation Benchmark Overview................................................................................................ .........3
2.1 Plant Layout................................................................................................................ .............3
2.2 Process Models.............................................................................................................. ..........4
2.2.1 Biological Process Model.................................................................................................4
2.2.2 Settling Process Model.................................................................................................... .6
2.3 Influent Composition........................................................................................................ .......7
2.4 Simulation Procedure........................................................................................................ .......8
2.4.1 Steady State Simulations.................................................................................................. 8
2.4.2 Dynamic Simulations....................................................................................................... 8
2.5 Performance Index........................................................................................................... ........9
2.5.1 Process Assessment........................................................................................................ ..9
2.5.1.1 Effluent Quality Index.................................................................................................. 9
2.5.1.2 Effluent Violations..................................................................................................... 10
2.5.1.3 Operational Costs....................................................................................................... 11
2.5.2 Controller Assessment...................................................................................................11
2.5.2.1 Controlled Variable Performance...............................................................................122.5.2.2 Manipulated Variable Performance............................................................................12
3 Simulator Tuning............................................................................................................. ...................14
3.1 Steady State tuning......................................................................................................... ........14
3.2 Dynamic Simulations......................................................................................................... ....15
3.3 Basic Control Strategy...................................................................................................... .....17
3.3.1 Control Loop #1........................................................................................................... ..17
3.3.2 Control Loop #2........................................................................................................... ..17
4 BioWin™   described by John B. Copp................................................................................................... ..............19
4.1 Model Issues - BioWin....................................................................................................... ....19
4.1.1 Biological Process Model...............................................................................................204.1.2 Settling Model............................................................................................................ ....21
4.2 Configuration Issues - BioWin............................................................................................... 22
4.3 Simulation Issues - BioWin.................................................................................................. ..24
4.3.1 Influent Data Files....................................................................................................... ...24
4.3.2 Aeration.................................................................................................................. ........25
4.3.3 Simulation Output Verification......................................................................................27
4.4 Basic Control Strategy - BIOWIN.........................................................................................284.5 Conclusion.................................................................................................................. ...........28
4.6 Acknowledgements............................................................................................................ ....28
5 FORTRAN   described by M.N. Pons, J.F. Beteau & J.M. LeLann.........................................................................29
6 GPS-X™
   described by John B. Copp................................................................................................... ..............33
6.1 Configuration Issues – GPS-X...............................................................................................3 3
6.2 Model Issues – GPS-X........................................................................................................ ...34
6.2.1 Biological Process Model...............................................................................................346.2.2 Settling Model............................................................................................................ ....36
6.2.3 Dissolved Oxygen Modelling.........................................................................................37
6.3 Simulation Issues – GPS-X................................................................................................... .39
6.4 Basic Control Strategy – GPS-X............................................................................................41
6.5 Conclusion.................................................................................................................. ...........42
6.6 Acknowledgements............................................................................................................ ....43iv7 MATLAB™ & Simulink™
   described by Ulf Jeppsson ................................................................................................... .............44
7.1 Configuration Issues – MATLAB/Simulink..........................................................................457.2 Model Issues – MATLAB/Simulink......................................................................................45
7.3 Simulation Issues – MATLAB/Simulink...............................................................................47
7.3.1 Solving Routines.......................................................................................................... ..48
7.3.2 Debugging................................................................................................................. .....49
7.3.3 Data Processing........................................................................................................... ...49
7.4 Basic Control Strategy – MATLAB/Simulink.......................................................................50
7.4.1 Hydraulic Delay Implications........................................................................................507.4.2 Nitrate Sensor............................................................................................................ .....51
7.5 Conclusion.................................................................................................................. ...........52
7.6 MATLAB/Simulink - code examples....................................................................................53
7.6.1 MATLAB/Simulink - Example 1...................................................................................537.6.2 MATLAB/Simulink - Example 2...................................................................................55
8 STOAT™   described by Jeremy Dudley.................................................................................................. .............57
8.1 Model Issues – STOAT........................................................................................................ ..57
8.1.1 Biological Process Model...............................................................................................578.1.2 Settling Model............................................................................................................ ....58
8.2 Configuration Issues – STOAT..............................................................................................59
8.3 Simulation Issues – STOAT................................................................................................... 60
8.3.1 Influent Data Files....................................................................................................... ...60
8.3.2 Aeration.................................................................................................................. ........61
8.4 Basic Control Strategy - STOAT...........................................................................................618.5 Conclusion.................................................................................................................. ...........64
8.6 Acknowledgements............................................................................................................ ....64
9 References................................................................................................................... ........................65
10 Appendices.................................................................................................................. ......................66
10.1 Steady state Results....................................................................................................... .........66
10.2 dynamic Results............................................................................................................ .........68
10.3 Basic Control strategy results............................................................................................. ....7111 
Benchmark Rationale
The activated sludge process aims to achieve, at minimum costs, a sufficiently low concentration of
biodegradable matter in the effluent together with minimal sludge production.  To do this, the processhas to be controlled.  Many control strategies have been proposed in the literature; however, theliterature does not provide a clear basis for comparison of these strategies because of the manyconfounded influences that have an impact on the system.  Many of these influences are easilyrecognised.  For instance, the influence of a control strategy on process performance is expected to vary
with different disturbances, thus the disturbances used to test the control strategy become important.
Additionally, the objective of reported strategies is not always consistent which may result in theomission of data necessary to make fair and unbiased comparisons.  As well, physical characteristics ofthe process can have an impact on process performance, which makes the comparison of strategiesapplied to different reactor layouts difficult. Also complicating the evaluation is the lack of standardevaluation criteria.  That is, effluent requirements and treatment costs (i.e. labour costs) are oftenlocation specific.  This makes it difficult to judge the particular influence of an applied control strategyfrom a reported performance increase.
There are several common aerobic control strategies including the maintenance of biomass levels
and/or dissolved oxygen concentrations in the aeration tanks by manipulating waste sludge flow, returnsludge flow or aeration capacity.  Such strategies are based on measurements of mixed liquorsuspended solids and/or dissolved oxygen.  Other control strategies make use of various processvariables including biomass activity, influent composition, and toxicity but, the literature is unclear asto the utility of these algorithms in control systems.  Controversies like this reinforce the need to devisean effective and unbiased evaluation method that can be used to judge the utility of different controlstrategies.
The literature related to activated sludge process control is substantial and numerous control strategies
have been proposed and tested in various ways.  However, a true comparison of control strategies asreported is difficult because of the many variables, which have an impact on process performance.Further, from a practical standpoint, it is not reasonable to experimentally test and verify theeffectiveness of all reported control strategies and often the assessment of these control strategies isconfounded by the multifaceted nature of the process under study.  Alternatively, given a standardisedprocedure, it is possible to efficiently evaluate numerous strategies through realistic/dynamic computersimulations.  Simulations provide a cost-effective means for the evaluation of control strategies, but the
unlimited number of simulation permutations make the need for a standardised protocol very important
if different strategies (and different simulation results) are to be compared.  Each control strategy mustbe simulated under the same conditions to ensure unbiased comparisons.  Validation of the computersimulations is difficult without supporting experimental or full-scale data, but the value of the work isenhanced through the use of accepted activated sludge models.  Because appropriate simulation toolsfor the activated sludge process are available this approach has numerous advantages, but still there is aneed for a standardised evaluation procedure.  To this end, there has been a recent effort to develop astandardised simulation protocol - a ‘simulation benchmark’ .
The idea to produce a standardised ‘ simulation benchmark’  was first devised and developed by the first
IAWQ Task Group on Respirometry-Based Control of the Activated Sludge Process  (Spanjers et al.,
1998a).  This original benchmark was subsequently modified by the European Co-operation in the fieldof Scientific and Technical Research (COST) 682/624 Actions in co-operation with the second IWA2Respirometry Task Group  (Copp, 2000; Alex et al., 1999; Pons et al., 1999).  In an attempt to
standardise the simulation procedure and the evaluation of all types of control strategies, the twogroups have jointly developed a consistent simulation protocol.
In this instance, the COST ‘ simulation benchmark’  is a comprehensive description of a standardised
simulation protocol and evaluation procedure including plant layout, simulation models and modelparameters, a detailed description of disturbances to be applied during testing and evaluation criteriafor testing the relative effectiveness of simulated strategies.  The COST ‘simulation benchmark’  is
meant to provide an unbiased basis for comparing past, present and future control strategies withoutreference to a particular facility.  This site independent tool is a fully defined wastewater treatmentscenario.  The simulation output generated with this modelled and uncontrolled scenario acts as a‘benchmark’ from which to judge the impact of simulated control strategies.  The power of this
simulation tool becomes apparent when it is realised that because the ‘simulation benchmark’  is a
defined protocol all benchmark-implemented strategies can be compared, irrespective of controlobjective.
The ‘simulation benchmark’ , by definition, must be independent of the simulation tool being used.
That is, the simulation software should have no affect on the modelling output such that differentsimulators modelling the same system should give the same result.  However, because of the manysimulator specific options, this is not always the case, nor is it a trivial task to ensure similar resultsusing different simulators.  A substantial effort has gone into this aspect of the ‘simulation benchmark’
development.  By stipulating specific model equations, modelling procedures and simulator specific
options, similar results can be achieved.  That is, similar results should be attainable irrespective of thewastewater simulation tool that is used including user defined computer code. Therefore, part of thedevelopment of the ‘simulation benchmark’  was a ring-test in which one and the same test was done
with different simulators.  Cross-platform testing of the COST ‘simulation benchmark’  has been
successfully demonstrated such that similar results have been attained using a number of commerciallyavailable simulation software tools and a user defined computer code.  For users of the benchmark,demonstrating similar results in this way is the first step in the evaluation procedure, and ensures thatthe simulator being used is tuned according to the ‘simulation benchmark’  specifications, which in turn
should ensure the consistent comparison of control strategy results.
The purpose of this publication is to provide a description of the COST ‘simulation benchmark’  as
currently defined and provide specific information about implementing the benchmark into differentsimulation platforms.32 
Simulation Benchmark Overview
There is little doubt that control strategies can be evaluated by model simulation.  However, the
methodology used in the evaluation is a critical step and must be defined in such a way as to ensureunbiased comparisons.  This implies that to make unbiased comparisons, each control strategy must beevaluated under the same conditions.  It also implies that the effect of the control strategy must becompared to a fully defined and suitable reference output.  Only then is it possible to truly evaluate acontrol strategy and compare it with another strategy.  The ‘simulation benchmark’  is such a tool and
provides a suitable reference output.
2.1 PLANT LAYOUT
The ‘simulation benchmark’  plant design is comprised of five reactors in series with a 10-layer
secondary settling tank.  Figure 2.1 shows a schematic representation of the layout.
Figure 2.1: Schematic representation of the ‘simulation benchmark’  configuration showing tanks 1 & 2 mixed and
unaerated, and tanks 3, 4 & 5 aerated.
The layout is fully defined and has the following characteristic features:
/c143 5 biological tanks-in-series with a secondary settler
/c143 total biological volume of 5999 m3  (tanks 1 & 2 each 1000 m3 and tanks 3, 4 & 5 each 1333 m3)
/c143 tanks 1 & 2 unaerated, but fully mixed
/c143 aeration of tanks 3, 4 & 5 achieved using a maximum  KLa of 10 hr-1
/c143 default K La of 10 hr-1 in tanks 3 & 4 and 3.5 hr-1 in tank 5
/c143 DO saturation in tanks 3, 4 & 5 of 8 gO 2 m-3
/c143 a non-reactive secondary settler with a volume of 6000 m3 (area of 1500 m2 and a depth of 4 m)
subdivided into 10 layers
/c143 a feed point to the settler at 2.2 m from the bottom (i.e. feed enters the settler in the middle of the
sixth layer)
/c143 two (2) internal recycles:
- nitrate internal recycle from the 5th to the 1st tank at a default flow rate of
55338 m-3 d-1
- RAS recycle from the underflow of the secondary settler to the front end of the plant at a
default flow rate of 18446 m3 d-1 (as there is no biological reaction in the settler, the oxygen
concentration in the recycle is the same as the value in the fifth tank reactor)
/c143 WAS is pumped continuously from the secondary settler underflow at a default rate of 385 m3 d-14The physical attributes of the biological reactors and the settler are listed Table 2.1 and a selection of
system variables are listed in Table 2.2.
Table 2.1: Physical attributes of the biological reactors and settling tank for the COST ‘simulation benchmark’  process
configuration.
Physical
ConfigurationUnits
Volume - Tank 1 1000 m3
Volume - Tank 2 1000 m3
Volume - Tank 3 1333 m3
Volume - Tank 4 1333 m3
Volume - Tank 5 1333 m3
Depth - Settler 4 m
Area - Settler 1500 m2
Volume - Settler 6000 m3
Table 2.2: A selection of system variables.
Default System
Flow RatesUnits
Influent flow rate 18446 m3 day-1
Recycle flow rate 18446 m3 day-1
Internal recycle flow rate 55338 m3 day-1
Wastage flow rate 385 m3 day-1
KLa - Tank 1 n/a hr-1
KLa - Tank 2 n/a hr-1
KLa - Tank 3 10 hr-1
KLa - Tank 4 10 hr-1
KLa - Tank 5 3.5 hr-1
2.2 PROCESS MODELS
To increase the acceptab ility of the results, two internationally accepted process models were chosen.
The IAWQ's Activated Sludge Model #1 (ASM1) was chosen as the biological process model (Henzeet al., 1987) and the double-exponential settling velocity function of Takács et al. (1991) was chosen
due to its wide use and apparent acceptability as a fair representation of the settling process.
2.2.1 Biological Process Model
It should be noted that since ASM1 was first introduced several modifications have been suggested
such that now a number of activated sludge models exist including ASM2, ASM2d and most recentlyASM3.  However, unlike ASM1, the newer models have yet to be fully embraced by the international
community. There are several limitations with ASM1, but its universal appeal and practical verification
overshadow these limitations.  A matrix representation of ASM1 (Henze et al., 1987) is shown in **.
** shows that ASM1 has 13 components (state variables) and 8 processes.  This model representation
is included here as a reference only.  A complete description of the model and its development areavailable elsewhere (Henze et al., 1987).  Table 2.3 lists the ASM1 state variables, the associated state
variable symbol and the state variable units.5Figure 2.2: Matrix representation of ASM1 showing the processes, components, process rate equations, and
stoichiometry (Henze et al., 1987).
6Table 2.3: State variables for the IAWQ Activated Sludge Model #1 (ASM1)
State Variable Description State Symbol Units
Soluble inert organic matter SI g COD m-3
Readily biodegradable substrate SS g COD m-3
Particulate inert organic matter XI g COD m-3
Slowly biodegradable substrate XS g COD m-3
Active heterotrophic biomass XB,H g COD m-3
Active autotrophic biomass XB,A g COD m-3
Particulate products arising from biomass decay XP g COD m-3
Oxygen SO g COD m-3
Nitrate and nitrite nitrogen SNO g N m-3
NH4+ + NH 3 nitrogen SNH g N m-3
Soluble biodegradable organic nitrogen SND g N m-3
Particulate biodegradable organic nitrogen XND g N m-3
Alkalinity SALK mol L-1
The matrix representation shows the stoichiometric relationships that relate the state variables to the
process rate equations.  By using this representation, it is possible to easily identify the variousparameters involved in the model.  To ensure the consistent application of the model in benchmarkingstudies, all of the kinetic and stoichiometric model parameters have been defined in the ‘simulation
benchmark’  description.  The stoichiometric parameter values to be used are listed in Table 2.4 and the
kinetic parameter values are listed Table 2.5.  Included in these tables are the parameter descriptions,their recognised symbols and units as well as an associated value.  The listed parameter estimatesapproximate those that are expected at 15
oC.
Table 2.4: Stoichiometric parameter values for ASM1 in the ‘simulation benchmark’ .
Parameter Description Parameter
SymbolValue Units
Autotrophic yield YA 0.24 g XBA COD formed (g N oxidized)-1
Heterotrophic yield YH 0.67 g XBH COD formed (g COD oxidized)-1
Fraction of biomass to particulate products fP 0.08 dimensionless
Fraction nitrogen in biomass iXB 0.08 g N (g COD)-1 in biomass ( XBA & XBH)
Fraction nitrogen in particulate products iXP 0.06 g N (g COD)-1 in Xp
Table 2.5: Kinetic parameter estimates for ASM1 in the ‘simulation benchmark’ .
Parameter Description Parameter
SymbolValue Units
Maximum heterotrophic growth rate µH 4.0 day-1
Half-saturation (hetero. growth) KS 10.0 g COD m-3
Half-saturation (hetero. oxygen) KO,H 0.2 g O 2 m-3
Half-saturation (nitrate) KNO 0.5 g NO 3-N m-3
Heterotrophic decay rate bH 0.3 day-1
Anoxic growth rate correction factor ηg 0.8 dimensionless
Anoxic hydrolysis rate correction factor ηh 0.8 dimensionless
Maximum specific hydrolysis rate kh 3.0 g slowly biodegradable COD (g XBH COD·day)-1
Half-saturation (hydrolysis) KX 0.1 g slowly biodegradable COD (g XBH COD)-1
Maximum autotrophic growth rate µA 0.5 day-1
Half-saturation (auto. growth) KNH 1.0 g NH 3-N m-3
Autotrophic decay rate bA 0.05 day-1
Half-saturation (auto. oxygen) KO,A 0.4 g O 2 m-3
Ammonification rate ka 0.05 m3 · COD (g day)-1
2.2.2 Settling Process Model
As with the biological process model, international acceptability was the overriding criteria for
choosing a settling model.  The double-exponential settling velocity function of Takács et al. (1991) is
based on the solids flux concept, and is applicable to both hindered and flocculent settling conditions,unlike the standard Vesilind model (Vesilind, 1968), which is applicable only under hindered settlingconditions.  Equation 2.1 shows the Takács double-exponential settling velocity function.  As with the
biological model, a number of parameters are used in the function and these have been fully defined in7the ‘simulation benchmark’  description.  The parameter values are listed in Table 2.6.  Table 2.6 lists
the parameters, giving a description of each parameter, an associated symbol and the parameter units.
* *
jp jh Xr
oXr
osj evevv− −− = (2.1)
0 ≤ vsj ≤ v'o
where: - vsj is the settling velocity in layer j (m/d)
-Xj* is the suspended solids concentration in layer j (g/m3), subject to the limiting condition
that ( X j* = Xj – Xmin )
-Xj is the suspended solids concentration in layer j (g/m3)
-Xmin is the minimum attainable suspended solids concentration (g/m3) calculated from X min
= fns • Xin [where: X in is the mixed liquor suspended solids concentration entering the settling
tank]
Table 2.6: Settler model parameters and default estimates.
Parameter Description Parameter
SymbolValue Units
Maximum settling velocity v'o 250 m day-1
Maximum Vesilind settling velocity vo 474 m day-1
Hindered zone settling parameter rh 0.000576 m3 (g SS)-1
Flocculant zone settling parameter rp 0.00286 m3 (g SS)-1
Non-settleable fraction fns 0.00228 dimensionless
2.3 INFLUENT COMPOSITION
It has already been stated that the disturbances used to test a particular control strategy play a critical
role in the evaluation.  That is, because of the multifaceted nature of activate sludge, a particularcontrol strategy may react well to one disturbance and not well to another.  Hence for an unbiased andcomplete evaluation, it is important that a series of disturbances be defined and that each controlstrategy be subjected to all the disturbances.  Only then can a fair comparison be made. To this end,
several influent file disturbances have been defined in the ‘ simulation benchmark’  description (Copp,
1999; Vanhooren and Nguyen, 1996).  In total, there are three influent disturbances and each is meantto be representative of a different weather event.  The data files are available for download fromvarious sources including the COST 624 web site (http://www.ensic.u-nancy.fr/COSTWWTP/).
Each of the files contains 14 days of influent data at 15-minute intervals.  The data included in the files
are listed in the following order: time; S
S; XB,H; XS; XI; SNH; SI; SND; XND; Q with influent SO; XB,A; XP;
and SNO assumed to be zero.  The final component, SALK, is given a default value of 7 mol m-3 for the
entire 14-day period.  In general, these files depict expected diurnal variations in influent flow and
COD.  As well, expected trends in weekly data have been incorporated.  That is, much lower peak
flows are depicted in the ‘weekend’ data, which is consistent with normal load behaviour at a
municipal treatment facility.
The files are representative of three disturbances: dry weather , a storm event  and a rain event .  The first
file is a dry weather  file and depicts what is considered to be normal diurnal variations in flow and
COD load.  In this file, the resultant peaking factor is 1.74 for maximum flow and 2.34 for maximumCOD mass load (i.e. flow • concentration, mass/day) as compared to the flow-weighted average values.
The second file is a variation on the first with the incorporation of two storm events.  The first storm
event in this file is of high intensity and short duration and is expected to flush the sewer of particulate
material.  The resuspension of these particles is reflected in the data through a significant increase ininert and biodegradable suspended solids.  The second storm event assumes the sewers were cleared ofparticulate matter during the first storm event; hence, only a modest increase in COD load is notedduring the second storm.  This result occurs even though the peak flow for both storms is the same andthe peak flow of the second storm is maintained over a longer period of time.  The third file is meant torepresent a long rain event.  The influent flow during this rain event does not reach the level attainedduring the storm events, but the increased flow is sustained for a much longer period of time.  Unlike8the storm events, there is no increase in COD load to the plant during the rain event.  The
flow-weighted average concentration of the influent components for the three files are shown in Table2.7.
Table 2.7: Flow-weighted average influent composition in the influent files.
Component dry weather storm event rain event Units
SS 69.50 64.93 60.13 g COD m-3
XB,H 28.17 27.25 24.37 g COD m-3
XS 202.32 193.32 175.05 g COD m-3
XI 51.20 51.92 44.30 g COD m-3
SNH 31.56 29.48 27.30 g N m-3
SI 30.00 28.03 25.96 g COD m-3
SND 6.95 6.49 6.01 g N m-3
XND 10.59 10.24 9.16 g N m-3
Q 18446 19745 21320 m3 day-1
2.4 SIMULATION PROCEDURE
A two-step simulation procedure is defined in the ‘simulation benchmark’  description and involves
simulations to steady state followed by dynamic simulations using the three influent data filesdescribed in the previous section.  Here again, the description is rigid to ensure the consistentapplication of the benchmark and to ensure that similar analyses are done on the output data.
2.4.1 Steady State Simulations
The initial step in the simulation procedure is to simulate the system under study (which may be
controlled or uncontrolled) to steady state using an influent of constant flow and composition.  Theflow-weighted dry weather  data is used for this purpose and steady state is defined using either the
software steady state solver (in GPS-X™, use an iteration termination criterion of 0.1) or by simulating
100 days using a constant influent.  All dynamic simulations should follow a steady state simulation.
This ensures a consistent starting point and should eliminate the influence of starting conditions on the
generated dynamic output.
2.4.2 Dynamic Simulations
Next, dynamic simulations should be performed using the influent files described previously.  The
implementation of these dynamic simulations will vary with the simulator being used, however ageneral overview of the required procedure is outlined in this section.
Starting from the steady state solution, using the dry weather  influent file as a dynamic input, the
system under study should be simulated for 14 days.  The resulting state variable values should thensaved (if possible, in the simulator being used) for all unit processes.  These state variable valuesrepresent the starting point for evaluating the dynamic response of the plant to each of the influent
disturbance files.  From the state achieved above, simulate a further 14 days using the dry weather ,
storm event  and rain event  influent files in separate simulation studies, but each time starting from the
state achieved after the initial 14-day dry weather  simulation.  That is, for any one system at steady
state, there are three 28-day dynamic simulations to perform: dry-dry, dry-storm and dry-rain.
The output data generated from the simulations described above is used to examine the dynamic
performance of the process.  The data of interest from these dynamic simulations is the data generatedduring the last 7 days of dynamic simulation.  That is, if the 28-day simulations are considered, the dataof interest is from day 22 to day 28 inclusive and includes three data sets: one for the dry weather
simulation, one for the storm event  simulation and one for the rain event  simulation.  Output data
should be recorded at 15-minute intervals (i.e. a total of 4 x 24 x 7 data entries) for each variable ofinterest.92.5 PERFORMANCE INDEX
Use of the weather files enables the examination of the dynamic behaviour of the system and/or control
strategy under study and the simulation procedure outlined above is meant to ensure that similarlyachieved data is analysed by all ‘simulation benchmark’  users.  However, the result of these dynamic
simulations leads to further questions; namely how is the huge amount of output data to be evaluated.To aid the evaluation process, a performance index has been developed for comparing the dynamicresponses and specifically for comparing the impact of different control strategies.
Because of the extensive amount of raw dynamic output data and the fact that that data may vary from
simulator to simulator, the dynamic results are compared using a number of performance indices.  The
performance index, as a whole, is a series of geographically independent measures that combine the
output data into a small number of composite terms.  These composite terms include, among others, ageneral effluent quality measure, energy terms for pumping and aeration, and a measure of sludgeproduction. The equations needed to calculate these terms are outlined below.
The system performance assessment included in the performance index is made at two levels. The first
level concerns the process performance and the second level concerns the local control loops.
Definition of Composite Variable Calculations:
TSSe = 0.75 (X S,e + XBH,e + XBA,e + XP,e + XI,e)
CODe =SS,e + SI,e + XS,e + XBH,e + XBA,e + XP,e + XI,e
BODe = 0.25 (S S,e + XS,e + (1 - f p) (XBH,e + XBA,e))
TKNe =SNH,e + SND,e + XND,e + iXB (XBH,e + XBA,e) + iXP (XP,e + XI,e)
NOe =SNO,e
Ntot,e =T K N e + NO e
2.5.1 Process Assessment
The first level of assessment quantifies the effect of the control strategy on plant process performance
and can be divided into three sub-levels:
/c143 effluent quality index
/c143 effluent violations
/c143 operational costs
2.5.1.1 Effluent Quality Index
Within the context of the ‘simulation benchmark’ , effluent quality is considered through an effluent
quality index (EQ), which is meant to quantify into a single term the effluent pollution load to areceiving water body.
Effluent quality (EQ): calculated as follows by integrating through the final 7 days of weather
simulations (T = 7 days):
dttQtPUtPUtPUtPUtPUTEQet
tNO TKN BOD COD TSSdays
o)(])( )( )( )( )([10001 7∫+ + + +•= (2.2)10where:
βi factors
PUTSS(t) = βTSS TSSe(t) βTSS = 2
PUCOD(t) = βCOD CODe(t) βCOD = 1
PUBOD(t) = βBOD BODe(t) βBOD = 2
PUTKN(t) = βTKN TKNe(t) βTKN = 20
PUNO(t) = βNO NOe(t) βNO = 20
As a check on the EQ calculation, an influent quality index (IQ) can be calculated.  To calculate the IQ,
apply the above equations to the influent files, but change the BOD coefficient from 0.25 to 0.65.  Forreference purposes, the IQ is normally included in a dynamic performance report.
NOTE: The βi factors in the table above were determined based, in part, on empirical effluent component
weightings.  The above weightings are based on a paper by Vanrolleghem et al. (1996) that cited a Flanders effluent
quality formula for calculating fines.  That formula is based on several terms including terms for organics, nutrients,
metals, and heat.  The metal and heat terms are not of interest to the benchmark, but the organic and nutrient terms
are applicable.  Using the steady state data for each of the layouts it is possible to calculate the organic and nutrient
terms based on the Flanders equation.  From these terms it is then possible to determine the specific fraction that
each term makes up of the fine formula i.e. %nutrients = N nutrients / (Nnutrients + Norganics).  The βi factors above were
chosen to reflect these calculated fractions.  For the COST ‘simulation benchmark’  layout, the steady state EQ was
found to be weighted as 22% nutrients and 78% organics.
2.5.1.2 Effluent Violations
Included in the performance evaluation is a measure of effluent violations. Constraints with respect to
five effluent components are defined and the percentage of time that the constraints are not met is to be
reported. As well, the methodology for reporting the number of violations is defined. The violations arecalculated for five terms: ammonia, total nitrogen, BOD
5, total COD and suspended solids and the
effluent constraints chosen for these five terms are as follows:
Table 2.8: Effluent constraints for the five violation variables.
Adopted Effluent
ConstraintsUnits
Ammonia SNH,e 4g N  m-3
Total Nitrogen Ntot,e 18 gN m-3
BOD5 BODe 10 gBOD m-3
Total COD CODe 100 gCOD m-3
Suspended Solids TSSe 30 gSS m-3
The effluent violations are reported through two quantities: (i) number of violations; and, (ii) % time
plant is in violation.  These quantities are calculated from the output data generated at 15-minuteintervals.
Number of violations:
This quantity represents the number of times that the plant is in violation of the effluent constraints.
This measure does not necessarily reflect the length of time that the plant is in violation.
 % time plant in violation:
This quantity is a measure of the percentage of the time that the plant is in violation of the effluent
constraints.112.5.1.3 Operational Costs
The operational costs are considered through three items: sludge production, pumping energy and
aeration energy (integrations performed on the final 7 days of weather simulations (i.e. from day 7 today 14 of weather file simulations, T = 7 days)).
Sludge production: - [(i) sludge for disposal; and, (ii) total sludge production]
(i) sludge for disposal (in units of kg d-1)
Psludge = [ Δ M(TSS system) + M(TSS w) ] / T (2.3)
where:
Δ M(TSS system) = change in system sludge mass from the end of day 7 to the
end of day 14
Δ M(TSS system) =M(TSS system)end of day14 - M(TSS system)end of day 7
M(TSS system) =M(TSS reactors) + M(TSS settler)
dttQXXXXX TSSMwwPwBAwBHwIt
twS wdays
o)(] [75.0)(, , , , ,7++++ =∫
(ii) total sludge production (in units of kg d-1)
Ptotal_sludge = Psludge + M(TSS e) / T (2.4)
where:
dttQXXXXX TSSMeePeBAeBHeIt
teS edays
o)(] [75.0)(, , , , ,7++++ =∫
 Pumping energy: (in units of kWh d-1)
dttQtQtQTPEw rt
tadays
o)]()()([04.0 7++ =∫(2.5)
where: Qa(t) = internal recycle flow rate at time t (m3 d-1)
Qr(t) = return sludge recycle flow rate at time t (m3 d-1)
Qw(t) = waste sludge flow flow rate at time t (m3 d-1)
 Aeration energy: (in units of kWh d-1)
∫∑=
=+ =days
ot
ti
iiL iL tdtaK taKTAE75
12)]( 8408.7)( 4032.0[24(2.6)
where: KLa i (t) = the mass transfer coefficient in ith aerated reactor at time t (in
units of hr-1)
2.5.2 Controller Assessment
The second level of assessment quantifies the effect of the control strategy on controller performance
and can be divided into two sub-levels:
/c143 controlled variable performance
/c143 manipulated variable performance12The following sections present the equations for calculating the assessment terms.
2.5.2.1 Controlled Variable Performance
IAE (Integral of the Absolute Error):
∫=days
ot
ti i dte IAE7(2.7)
where: ei is the error in the controlled variable ( ei = Zi,setpoint – Zi,observed)
(note: subscript i is meant to distinguish different controlled variables in the
same system)
ISE (Integral of the Squared Error):
∫=days
ot
ti i dte ISE72(2.8)
Maximum deviation from setpoint:
ierror
i e Dev max)(max = (2.9)
Variance in the controlled variable error:
22)()(i ii eeeVar −= (2.10)
where:
Tdte
edays
ot
ti
i∫=7
Tdte
edays
ot
ti
i∫=72
2
2.5.2.2 Manipulated Variable Performance
Maximum deviation in the manipulated variable:
min, max,)(maxi iMV
i uu Dev −= (2.11)
where: ui is the value of the manipulated variable ( MV) and the minimum and
maximum are determined during the 7 days of interest defined above (note: thesubscript i is meant to distinguish different manipulated variables in the same
system)
Maximum deviation in delta manipulated variable:
)(max)(maxiu
i u DeviΔ=Δ(2.12)
where:
)()( tudttuui ii −+=Δ13Variance of the change in manipulated variable:
22)( )(i i i uuuVar Δ−Δ=Δ (2.13)
where:
Tdtu
udays
ot
ti
i∫Δ
=Δ7
Tdtu
udays
ot
ti
i∫Δ
=Δ7 2
2
Although the performance index is meant to be geographically independent, the structure of the
performance index allows for location specific criteria to be defined in subsequent analyses.  That is,the performance terms described above MUST be calculated for each strategy simulation, but emphasis
can be placed on specific performance terms depending on location specific criteria if a user so wishes.For example, for a particular user if effluent quality is of primary concern irrespective of overall coststhen the analysis of the performance index terms can be weighted accordingly.  Alternatively, inanother location where reducing overall costs is the primary objective, the index can be tailored to that
situation.  This structure allows for substantial flexibility in applying the ‘simulation benchmark’  to
specific control strategies, while at the same time providing a means to make meaningful locationspecific comparisons and design decisions.143 
Simulator Tuning
This section and the sections that follow have been written to provide information on the tuning of
specific simulation software tools according to the ‘simulation benchmark’  specifications.  That is,
although the ‘simulation benchmark’  is meant to be platform-independent, simulator specific options
make obtaining the same results using different simulators difficult even when simulating the samesystem using the same process models.  However, by stipulating specific model equations, modellingprocedures and simulator specific options, similar results can be achieved.
For new users, duplicating these steady state and dynamic results is an essential first step in the
evaluation procedure. By synchronising the simulation tool, users ensure that the simulator being usedis tuned in an appropriate way, which in turn should ensure the consistent comparison of processbehaviour and the consistent comparison of implemented control strategies.
3.1 STEADY STATE TUNING
Once the configuration has been set-up in the simulator of choice, the initial step in this tuning
procedure is to simulate the uncontrolled plant to steady state using an influent of constant flow and
composition.  As described above, the flow-weighted dry weather  data is used for this purpose and
steady state is defined using either the software steady state solver or by simulating 100 days using a
constant influent.
Following simulation to steady state, the generated output data must be compared to the standardised
output that is included in the benchmark description (Table 3.1).  The standardised steady state output
results listed in this section have been duplicated using BioWin™, EFOR™, GPS-X ,
Matlab/Simulink™, Simba™, STOAT™, WEST™ and a user defined FORTRAN code and for that
reason are assumed to be correct [A full listing of all the steady state results generated with thedifferent simulators can be found in Appendix 10.1.].  It is assumed that the simulation tool and
associated models being used have been input correctly once similar steady state results have been
attained.  Users that do not generate these steady state results must re-examine their implementationlooking for errors.  Note that tuning experience has shown that these discrepancies may be the result ofuser-input errors (i.e. incorrect parameters, incorrectly specified flow rates…) or simulator-specificoptions.  Users may need to examine both possibilities to find a particular problem.
NOTE: It should be noted here that the data presented in Table 3.1 was generated using the default K la of 3.5 hr-1 in
the last tank.  Discrepancies will result if the maximum K la of 10 hr-1 is used in these uncontrolled steady state
simulations.15Table 3.1: ‘Simulation benchmark’  system steady state simulation results - dry weather influent file.
Component Tank 1 Tank 5 Settler Underflow Effluent Units
VSS 2959.7 2945.9 5760.5 11.25 g  m-3
TSS 3285.2 3269.8 6393.9 12.50 g  m-3
SI 30 30 30 30 g COD m-3
SS 2.81 0.89 0.89 0.89 g COD m-3
XI 1149.2 1149.2 2247.1 4.39 g COD m-3
XS 82.14 49.31 96.42 0.19 g COD m-3
XB,H 2551.8 2559.4 5004.7 9.78 g COD m-3
XB,A 148.4 149.8 292.9 0.57 g COD m-3
XP 448.9 452.2 884.3 1.73 g COD m-3
SO 0 0.49 0.49 0.49 g COD m-3
SNO 5.37 10.42 10.42 10.42 g N m-3
SNH 7.92 1.73 1.73 1.73 g N m-3
SND 1.22 0.69 0.69 0.69 g N m-3
XND 5.28 3.53 6.90 0.013 g N m-3
OUR 1.49 31.87 - - g m-3 hr-1
Steady State Retention Times
Solids retention time (SRT) 9.18 daysHydraulic retention time (HRT) 15.61 hours
NOTE: An absolute error tolerance of 0.01g m-3 is deemed acceptable for state variables less than 0.1g m-3 and a
tolerance limit of 0.5% has been set for all state variables greater than 0.1g m-3.  If the achieved results do not fall
within those tolerances, users are advised to re-examine their set-up looking for possible errors.
Once acceptable steady state values have been achieved, users are encouraged to perform the dynamic
simulations to further test the tuning of their simulation tool.
3.2 DYNAMIC SIMULATIONS
A series of dynamic simulations should be performed as described previously in Section 2.4.2 using the
uncontrolled plant and the three dynamic influent files.  Then, using the generated data, theperformance indices should be calculated.  Users are advised to compare their performance results with
the corresponding performance results included in the benchmark description.  The recognised
performance index results are listed in Table 3.2 and a complete listing of the compiled dynamic resultsis included in Appendix 10.2. Once acceptable dynamic results are achieved, the user can be reassuredthat the simulator tool being used is tuned in accordance with the benchmark specifications.
A substantial amount of work has gone into evaluating the dynamic responses of various software
packages and it has been determined that it is not realistic for each of the simulators to produceprecisely the same instantaneous dynamic results (unlike the steady state condition which should bereproducible using all simulators). For instance, Figure 3.1 shows the dynamic output from three
different simulators.  The differences illustrated in the figure are the result of the different means used
to propagate soluble components through the settler.  In these three instances the particulatecomponents are modelled in precisely the same way, but the soluble components are modelleddifferently. As it is not always feasible to alter the specific features of certain models in commerciallyavailable simulators, some consideration has to be given to the analysis of dynamic data generatedusing an undefined variation to the defined system.  In this example the variation is the number ofsettler layers used for soluble components.  At steady state, these differences make no difference, butthe effect is amplified under dynamic conditions.16Table 3.2: Recognised dynamic performance index results for the uncontrolled benchmark plant using the three
influent data files.
Performance Index Variable Recognised Results Units
dry weather storm event rain event
Influent Quality (IQ) 42043 42043 42043 kg PU d-1
Effluent Quality (EQ) 7067 7993 8840 kg PU d-1
Sludge for Disposal 2436 2600 2353 kg SS d-1
Total Sludge Production 2671 2915 2737 kg SS d-1
Aeration Energy 6476 6476 6476 kWh d-1
Pumping Energy 2967 2967 2967 kWh d-1
Ammonia (eff. limit 4g m-3)
Number of violations 7 7 7Time in violation 62.50 64.43 63.39 % of time
Total Nitrogen (eff. limit 18g m
-3)
Number of violations 5 4 3Time in violation 8.18 8.48 4.46 % of time
BOD
5 (eff. limit 10g m-3)
Number of violations 0 0 0Time in violation 0.00 0.00 0.00 % of time
Total COD (eff. limit 100g m
-3)
Number of violations 0 0 0
Time in violation 0.00 0.00 0.00 % of time
Suspended Solids (eff. limit 30g m-3)
Number of violations 0 1 0Time in violation 0.00 0.15 0.00 % of time
In this instance, users have to qualitatively as well as quantitatively evaluate their dynamic simulation
results with the results included in the ‘simulation benchmark’  description.  Using the performance
index terms as a measure of the simulated dynamic behaviour, it is possible to determine if the
particular simulator being used is dynamically synchronised with the output of the many simulators
that have verified the available dynamic performance data.
Figure 3.1: An example of three dynamic outputs produced by three different default settler models for soluble
components in three different simulators.
NOTE: The 10-layer soluble model is defined in the benchmark. In addition to the 0-layer model, the 10-layer
model has been implemented in WEST , giving precisely the same results as illustrated for Matlab/Simulink.17The tolerance limits for the dynamic simulations depend somewhat on the software being used and the
exact models implemented.  In particular, the method used to propagate the soluble compounds throughthe settler (Figure 3.1) seems to be a recurring problem. That is, dynamic results should be compared tothe correct dynamic reference output for the soluble model being used, if possible.  For simulations
using a 1-layer or a 10-layer soluble settler model, a tolerance limit of 0.5% has been set for all state
variables and performance indices.  For results generated with neither of these models, a qualitativeevaluation will have to be performed.  Nevertheless, even with the undefined soluble models,differences for the most part should be more than 0.5% for all variables and indices. If the achievedresults do not fall within this tolerance, users are advised to re-examine their set-up looking for possibleerrors.
3.3 BASIC CONTROL STRATEGY
Following the successful outcome of the dynamic simulations, users can attempt to implement the
sample control strategy outlined below.  This control strategy was designed as a means to test thebenchmark description and evaluate the impact of user/simulator-defined control algorithms on thesimulation results. The basic control strategy has two control loops.
3.3.1 Control Loop #1
The first loop involves controlling the dissolved oxygen (DO) level in the final compartment to a
setpoint of 2.0 g m
-3 by manipulation of the oxygen transfer coefficient (Figure 3.2). The DO sensor
used in this first loop is assumed to be ideal with no delay or noise.  Recall that the K la in the last
compartment is constrained to a maximum of 10 hr-1 (Section 2.1).
Figure 3.2: Basic control strategy control loop #1.
3.3.2 Control Loop #2
The second control loop involves controlling the nitrate level in the second anoxic compartment (i.e.
the second tank) to a setpoint of 1.0 g m-3 by manipulation of the internal recycle flow rate (Figure 3.3).
In this loop, the nitrate sensor is assumed to have a time delay of 10 minutes, with white, normallydistributed (standard deviation of 0.1 g m
-3), zero-mean noise.  The internal recycle flow rate is
constrained to 1.66x the default rate or 92230 m3 d-1.18Figure 3.3: Basic control strategy control loop #2.
To examine the effect of different simulators and implementations on the control strategy impact, the
control strategy was implemented into a number of simulators.  The nitrate controller performanceresults are shown in Table 3.3 [A complete listing of the control strategy results is in Appendix 10.3].Only a portion of the performance results are shown, but the results illustrate that even with the fullydefined benchmark plant and a well-defined control strategy, implementation of the control strategy hasan impact on the results.  In particular, tuning can have a large impact as can the criteria used duringthe tuning exercise.  For instance, the ISE results in Table 3.3 indicate that the GPS-X controller is themost finely tuned.  However, clearly this controller could be more finely tuned if the maximumdeviation from setpoint or standard deviation of the error is used as the tuning criteria (see WEST
results).  Unfortunately there is no clear solution to this problem and users should be aware of these
types of problems when they use the ‘simulation benchmark’  for strategy evaluations.
Table 3.3: Nitrate controller performance indices calculated from output data generated by three different simulators
using the dry weather  dynamic influent file with the ‘basic control strategy’ implemented into the ‘simulation
benchmark’ .
Nitrate Controller Performance (2nd tank) GPS-X Matlab/Simulink WEST Units
Controller type velocity PI cont PI with aw PI
Proportional gain (K) 7500 15000 10000 m3 d-1 (g N m-3)-1
Integral time constant (T i) 0.0125 0.05 0.01 d
Anti-windup time constant (T t) not used 0.03 not used d
Controlled variable, SNO
Setpoint 1 1 1 g N m-3
Integral of the absolute error (IAE) 0.185 1.482 0.829 (g N m-3)*d
Integral of the square error (ISE) 0.066 0.598 0.189 (g N m-3)2*d
Max deviation from setpoint 0.883 0.887 0.652 g N m-3
Standard deviation of the error 0.179 0.292 0.164 g N m-3
Variance of the error 0.032 0.085 0.027 (g N m-3)2
Manipulated variable, Qa
Max deviation in the MV (max-min) 49531 36691 46725 m3 d-1
Max deviation in the MV  (one 15-min interval) 10677 8078 9881 m3 d-1
Standard deviation of delta MV 1623 1662 1554 m3 d-1
Variance of delta MV 2632604 2762152 2414927 (m3 d-1)2194 
BioWin™ described by John B. Copp
NOTE: The issues and procedures outlined in this chapter are specific for the use of BioWin with the  ‘simulation
benchmark’ and in no way should be interpreted as a necessary procedures for using BioWin for any other purpose.
BioWin is a dedicated process simulator that makes use of linked process units to simulate biological
wastewater treatment systems.  It has been developed as a Microsoft Windows™ application and runson an IBM PC-type computer.  Implementation of the ‘simulation benchmark’  into this simulator must
take into consideration a number of BioWin specific features that are not entirely consistent with thebenchmark description.  That is, to achieve benchmark consistent results, users must be aware of how
to overcome the differences between BioWin and the rigidly defined benchmark description.
The main differences relate to the BioWin models because the benchmark specified models are not
explicitly available.  However, because the structure of the BioWin models are not significantlydifferent from those defined in the benchmark, the benchmark models can be approximated by theBioWin models through manipulation of BioWin model parameters.  The biological model is easilytransformed, but the settler model impact is more difficult to overcome.  Nevertheless, the settler modelimpact can be compensated for through several model, configuration and simulation alterations.
In addition to the model differences, there are several BioWin specific features that ‘simulation
benchmark’  users need to be aware of when tuning BioWin to the benchmark specifications.  These
features include issues related to aeration, and setting up the proper structure for dynamic influent files.The following sections outline what BioWin users need to do to tune their software tool to thebenchmark specifications and thus achieve the benchmark defined results.
4.1 MODEL ISSUES - BIOWIN
The ‘simulation benchmark’ specifies two process models: one for the biological processes and one for
the settling process.  For the biological processes, ASM1 (Henze et al., 1987) is specified and for the
settling process, the double-exponential settling function of Takács et al., (1991).  Unfortunately,
neither of these models is explicitly available in BioWin.  Rather, underlying the BioWin user interfaceare sedimentation models (both primary and secondary) and a comprehensive biological process model.The biological process model is an extension of the IAWQ’s ASM1, and includes excess biologicalphosphorus removal (based on Dold, 1992).  As the defined BioWin models do not differ significantlyin structure from the benchmark specified models, it is possible to approximate the required modelsthrough manipulation of the BioWin model parameters.  The following sections outline the necessarychanges.
BioWin™ is a trademarked product of:
EnviroSim Associates Ltd., 482 Anthony Drive, Oakville, Ontario, CANADA L6J 2K5
tel: (905) 648-9814
fax: (905) 338-5817
web: www.envirosim.com204.1.1 Biological Process Model
BioWin uses an extended version of ASM1 for its biological model.  This extended model includes
several additional features including biological phosphorus removal, but the BioWin user is able tochoose between the full ‘CNP’ model and a reduced version of the model that includes only the carbonand nitrogen removal processes: the ‘CN’ model.  The first step in the BioWin implementationprocedure is to choose the ‘CN’ model rather than the default “CNP’ model.  Although similar in
structure to ASM1, the BioWin biological model uses different symbols for many of its state variables.
Table 4.1 lists the ASM1 and BioWin ‘CN’ model symbols.
Table 4.1: Comparison of state variable symbols used in the IAWQ Activated Sludge Model #1 (ASM1) and in the
BioWin ‘CN’ model (n/s not specified).
State Variable Description ASM1 Symbol BioWin Symbol Units
Soluble inert organic matter SI SUS g COD m-3
Readily biodegradable substrate SS SBSC g COD m-3
Particulate inert organic matter XI XI g COD m-3
Slowly biodegradable substrate XS XSP g COD m-3
Active heterotrophic biomass XB,H ZBH g COD m-3
Active autotrophic biomass XB,A ZBA g COD m-3
Particulate products arising from biomass decay XP ZE g COD m-3
Oxygen SO SO g COD m-3
Nitrate and nitrite nitrogen SNO NO3 g N m-3
NH4+ + NH 3 nitrogen SNH NH3 g N m-3
Soluble biodegradable organic nitrogen SND NOS g N m-3
Particulate biodegradable organic nitrogen XND XON g N m-3
Alkalinity SALK SALK mol L-1
Phosphorus - PS g P m-3
Inert suspended solids - n/s g ISS m-3
Further, the BioWin model uses several rate equations that vary slightly from the rate equations in
ASM1 and makes use of several additional switching functions.  Because of these variations, the
following set of parameters should be used in BioWin to reduce the BioWin ‘CN’ model to the‘simulation benchmark’ defined ASM1.  Table 4.2 lists the stoichiometric parameters and Table 4.3
lists the kinetic parameters to be used.
Table 4.2:  ‘Simulation benchmark’ stoichiometric parameter estimates for ASM1 and the BioWin ‘CN’ model
(n/s not specified).
BioWin Description ASM1
SymbolBenchmark
ValueBioWin
ValueUnits (using ASM#1 nomenclature
where necessary)
Autotrophs
Yield (Aerobic) YA 0.24 0.24 g XBA COD formed (g N oxidised)-1
N in Biomass iXB 0.08 0.08 g N (g COD)-1 in biomass ( XBA & XBH)
N in Inert iXP 0.06 0.06 g N (g COD)-1 in Xp
P in Biomass - n/s 0.021 g P (g COD)-1 in biomass ( XBA & XBH)
P in Inert - n/s 0.021 g P (g COD)-1 in Xp
Endog. Residue fP 0.08 0.08 dimensionless
COD:VSS fcv 1.48 1.48 g COD g VSS-1
Heterotrophs
Yield (Aerobic) YH 0.67 0.67 g XBH COD formed (g COD oxidised)-1
N in Biomass iXB 0.08 0.08 g N (g COD)-1 in biomass ( XBA & XBH)
N in Inert iXP 0.06 0.06 g N (g COD)-1 in Xp
P in Biomass - n/s 0.021 g P (g COD)-1 in biomass ( XBA & XBH)
P in Inert - n/s 0.021 g P (g COD)-1 in Xp
Endog. Residue fP 0.08 0.08 dimensionless
COD:VSS fcv 1.48 1.48 g COD g VSS-1
Yield (Anoxic) - n/s 0.67 g XBH COD formed (g COD oxidised)-1
Adsorption Max - n/s 1.0021Table 4.3:  ‘Simulation benchmark’ kinetic parameter estimates for ASM1 and the BioWin ‘CN’ m odel
(n/s not specified).
BioWin Description ASM1
SymbolBenchmark
ValueBioWin
ValueUnits (using ASM#1 nomenclature
where necessary)
Autotrophs
Mu Max µA 0.5 0.5 day-1
Ks NH4 KNH 1.0 1.0 g NH 3-N m-3
Ba (endog.) bA 0.05 0.05 day-1
Heterotrophs
Mu Max µH 4.0 4.0 day-1
Ks COD KS 10.0 10.0 g COD m-3
Bh bH 0.3 0.3 day-1
Neta Anox. Hyd. ηh 0.8 0.8 dimensionless
Neta Ana. Hyd. ηh 0.8 0.8 dimensionless
Neta Anox Growth ηg 0.8 0.8 dimensionless
Hydrolysis Rate kh 3.0 3.0 g XS (g XBH COD·day)-1
Ks Hydrolysis KX 0.1 0.1 g XS (g XBH COD)-1
Adsorption Ka - n/s 10.0
Ferment. Rate - n/s 0.0
Ferment Ks - n/s 5.0
Ammonification ka 0.05 0.05 m3 · COD (g day)-1
Switching Functions
Hetero. DO Limit KO,H 0.2 0.2 g O 2 m-3
SND DO Limit - n/s 0.2 g O 2 m-3
Auto. DO Limit KO,A 0.4 0.4 g O 2 m-3
NH3 Limit - n/s 0.000 g NH 3-N m-3
NO3 Limit KNO 0.5 0.5 g NO 3-N m-3
Alk. Limit - n/s 0.01 mol L-1
4.1.2 Settling Model
The double-exponential settling velocity function of Takács et al. (1991) was chosen as the  ‘simulation
benchmark’ settling model due to its wide use and apparent acceptability as a fair representation of the
settling process.  The Takács model is based on the solids flux concept as is the standard Vesilindmodel (Vesilind, 1968), a modified version of which is used by BioWin.  Equation 4.1 shows theTakács double-exponential settling velocity function specified in the benchmark, and Equation 4.2shows the model used by BioWin.
* *
jp jh Xr
oXr
osj evevv− −− = (4.1)
0 /c148/c3vsj /c148/c3v'o
where: - vsj is the settling velocity in layer j (m d-1)
-Xj* is the suspended solids concentration in layer j (g m-1), subject to the limiting condition
that ( X j* = Xj – Xmin )
-Xj is the suspended solids concentration in layer j (g m-1)
-Xmin is the minimum attainable suspended solids concentration (g m-1) calculated from
Xmin = fns • Xin [where: X in is the mixed liquor suspended solids concentration entering the
settling tank]




+• =•−
jtsj XK
osjXKX
evvj(4.2)
where: - vsj is the settling velocity in layer j (m d-1)
- vo is the maximum settling velocity (g m-3)
- Xj is the suspended solids concentration in layer j (g m-3)
- K is the Vesilind model parameter (m3 kg)
- Kst is the settling velocity TSS switch (mg L-1)22The parameters used in the Takács function and BioWin model are listed in Table 4.4.  The table lists
the parameters, giving a description of the parameters, the associated symbol and the parameter units.Also given in the table are the model parameter values to be used in any benchmark work.  It can beseen that although the models have a similar form, the magnitude of the parameters is significantly
different.
Table 4.4:  ‘Simulation benchmark’ settler model parameters and their associated values.
Parameter Description Parameter
SymbolValue Units
Takács Function
Maximum settling velocity v'o 250 m day-1
Maximum Vesilind settling velocity vo 474 m day-1
Hindered zone settling parameter r h 0.000576 m3 (g SS)-1
Flocculant zone settling parameter r p 0.00286 m3 (g SS)-1
Non-settleable fraction f ns 0.00228 dimensionless
BioWin Model
Maximum settling velocity vo 970 m day-1
Vesilind model parameter K 0.75 m3 kg-1
Settling velocity TSS switch Kts 900 mg L-1
The BioWin settling model parameters were determined by plotting the Takács and BioWin functions
for values of Xj ranging from 0 to 8000 mg L-1 (Figure 4.1).  Then, the BioWin parameters were
adjusted until the BioWin curve approximated the benchmark required curve.  Figure 4.1 shows theresults of this procedure.  It is clear that the resulting curves are not identical, but they are sufficientlyclose to one another.  That is, the observed differences do not result in significant differences in themodelled settling behaviour.
Figure 4.1 : Examination of settling velocity profiles using the Takács and BioWin settling models.
4.2 CONFIGURATION ISSUES - BIOWIN
Set-up of the  ‘simulation benchmark’ configuration using the BioWin user interface requires 13
flowsheet elements including 5 bioreactors , a model settler , 2 flow split nodes , 2 mixer nodes , and 3
input/output elements as well as the various connecting closed pipes .  The benchmark configuration
generated using BioWin (version 4.4b) can be seen in Figure 4.2.23
Figure 4.2: Interface layout of COST  ‘simulation benchmark’ plant in BioWin (Version 4.4b).
The appropriate volumes for each unit can be input using a 4m depth for the bioreactors, and as
specified in the benchmark description a 4m depth for the settler.  The settler should be assigned 10
layers with the settler influent fed to layer 4 (Figure 4.3).  This feed layer is inconsistent with the
benchmark description that specifies layer 6 (from the bottom), but two points need to be emphasisedhere: (i) BioWin numbers its settler layers from the top rather than the bottom as the  ‘simulation
benchmark’ does, and (ii) the dynamic settling results of the BioWin settler (Figure 4.4) were found to
more closely approximate the confirmed dynamic benchmark results when layer 4 (as opposed to layer5) was used.  Differences in the settler models may provide some indication as to the cause.
The Takács model makes use of a term defined as the ‘non-settleable fraction’.  This term is used to
calculate the minimum solids attainable after settling, but it also removes a portion of the solids from
the settling equation (Equation 4.1).  These ‘non-settleable’ solids are mapped directly to the effluentstream irrespective of the settling process that is occurring.  This has the effect of increasing theeffluent solids as compared to the case when such a term is not used and the BioWin model has no suchterm.  Therefore, it is understandable that the BioWin model produces a lower effluent suspendedsolids concentration when the feed is introduced to the BioWin settler at layer 5 as specified in thebenchmark description.   This explanation also is consistent with the settler output data shown in Figure4.4.
Figure 4.3: Schematic diagram of differences in the benchmark and BioWin settler set-up.
When the BioWin settler is fed using layer 5, the settler generates a dynamic profile that mirrors theexpected benchmark profile, but the values are consistently 4mg L
-1 lower (Figure 4.4).  Unfortunately,
there is no easy way to overcome this difference while still feeding to layer 5.  Alternatively, the settlercan be fed at layer 4.  At steady state, this results in a settler profile that is consistent with the
benchmark specified results, but dynamically it causes the settler to be more susceptible to variations in
the settler input.  This also is depicted in Figure 4.4 as greater oscillations in effluent solids can be seenwhen the settler is fed at layer 4.  Nevertheless, for benchmarking purposes, the BioWin settler shouldbe fed using layer 4, as on average, it produces results that more closely approximate the acceptedbenchmark results.24
Figure 4.4: Illustrative example showing the differences in BioWin output (effluent solids) when the feed to the settler
is changed from layer 4 to layer 5.
4.3 SIMULATION ISSUES - BIOWIN
At the simulation stage, several other factors must be addressed including configuration of the dynamic
influent files and setting up proper aeration.
4.3.1 Influent Data Files
To set-up the dynamic influent files (‘*.din’ files in the BioWin environment), it in possible to use a
BioWin utility program ‘dinassit.exe’ or it can be done manually using a spreadsheet program.  Eitherway, it is important that users recognise that the benchmark influent files are not in the correct formatfor BioWin.  That is, BioWin requires that the influent data be ordered in a particular way to be readcorrectly and this order is not the same as presented in the raw data files.  Further, BioWin influent files
have 24 components, so place holders (i.e. 0’s) must be used for influent components not included in
the data files, but are used by BioWin (i.e. poly-P heterotrophs) nevertheless.  Figure 4.5 shows thestructure of the influent files required by BioWin.
Figure 4.5: Illustrative example of the ordered BioWin influent file structure showing the influent composition for the
steady state simulations and place holders for unused components.
From the previous discussion related to the settler model, it should be apparent that the total suspended
solids (TSS) concentration is a critical component of the secondary settling process and needs to be
calculated.  By definition, TSS is the sum of the volatile and inert suspended solids (VSS + ISS), but it
should be noted that ISS is not included in the benchmark defined influent files because ASM1 doesnot make use of an ISS state variable in its model structure.  To overcome this apparent inconsistency,the ‘simulation benchmark’ defines a bioreactor TSS:CODp ratio of 0.75  gTSS gCOD
 -1 (where CODp25is the bioreactor particulate COD concentration).  This allows the TSS concentration to be calculated
explicitly from the particulate COD concentration, which is calculable from the ASM1 state variables.
BioWin is not designed to allow this TSS calculation from CODp.  Rather, BioWin specifies ISS as a
state variable and calculates the TSS concentration from the addition of the ISS and VSS by tracking
the dynamic flux of ISS into and out of the system.  Therefore, influent ISS is a crucial influentcomponent that must be included in a BioWin dynamic influent file.  For the steady state case, theinfluent ISS was determined from calculations based on the accepted steady state  ‘simulation
benchmark’ results (i.e. given the system SRT, volume and steady state influent flow rate, what
influent ISS would be required to give a bioreactor TSS:CODp ratio of 0.75 under steady stateconditions). Figure 4.5 shows that for the steady state simulations, users should input an ISS of14.7 g m
-3.  Dynamically a constant influent ISS is less ‘realistic’.  So, for the dynamic influent files, a
variable ISS was calculated based on a constant influent VSS:TSS ratio of 92.83%.  This percentage
was calculated based on the steady state influent composition outlined above using an influent ISS of14.7 g m
-3.  The influent ISS at any given influent time interval is calculated as follows.
481XXX
VSSin in in IS HB
in.) (, ++
= (4.3)
92830VSSTSSin
in.= (4.4)
92830928301VSSVSSTSSISSin
in in in.).(−•=−= (4.5)
NOTE: It may be argued that a CODp:VSS ratio of 1.48 for the influent is too low, but it has been used here to avoid
the introduction of another parameter.  It also should be realised that this parameter has no effect on the calculated
ISS as changing this ratio has a reciprocal and offsetting effect on the influent VSS:TSS ratio used in the calculation.
In additional to the ISS, one additional state variable is of particular interest to the BioWin benchmark
implementation: alkalinity.  A constant influent alkalinity of 7 mmol L-1 is specified in the benchmark
description and as the BioWin biological model makes use of this variable in an alkalinity switchingfunction, it must be included in the influent data file.
4.3.2 Aeration
There are two BioWin issues that must be addressed and understood with respect to the benchmark-
specified aeration.  The first is dissolved oxygen (DO) saturation and the second is air supply.  BioWin
users are referred to the simulator documentation for a complete description of the principles involved,but some of the more important points and the necessary parameter values are outlined here.
The ‘simulation benchmark’ defines the bioreactor DO saturation as 8 mg L
-1, but this value cannot be
explicitly entered into the BioWin ‘DO saturation conc.’ text box, because BioWin adjusts this enteredvalue to account for temperature, pressure and tank depth and calculates the ‘true’ DO saturation in thebioreactor.  This ‘true’ bioreactor DO saturation is calculated as follows:




−•+−•=∞
VTSEVTB
SPPm3410kPa325101dPPCC./.** (4.6)
where:C*
Stabulated value for dissolved oxygen surface saturation concentration at water
temperature T, standard atmospheric pressure P S, and 100 percent relative humidity,
mg L-1
C*
/c146steady-state dissolved oxygen saturation concentration attained at infinite time at water
temperature T and field atmospheric pressure P B, mg L-1 [Note: this is “in the tank”, is
influenced by tank depth and is equal to 8 mg L-1 for the ‘simulation benchmark’ ]
dEeffective saturation depth (m)
PBfield atmospheric pressure (kPa)26PSatmospheric pressure at standard conditions (101.325 kPa or 10.34 m water)
PVTvapor pressure of water at temperature T (kPa)
and,
PB = PS = 101.325 kPa /c200 0m elevation assumed (4.7)
PVT = 0.66304619 • (1.06400888)T = 2.293 kPa /c200 T = 20oC assumed (4.8)
dE = fED • tank depth /c200 fED = 0.325 assumed (4.9)
Substituting into Equation 6, it is possible to determine that  C*
S is 7.0882 mg L-1.  This is the value that
should be entered into the BioWin ‘DO saturation conc.’ text box to be consistent with the benchmark
defined DO saturation of 8 mg L-1.  Figure 4.6 shows the applicable aeration dialogue box (BioWin
version 4.4b) for entering the DO saturation value.
Figure 4.6 : ‘Aeration parameters’ dialogue box (BioWin version 4.4b) showing the necessary BioWin aeration
parameters for the ‘simulation benchmark’ .
The method for calculating the air supply rate is the second issue that needs addressing to ensure that
the BioWin aeration is consistent with the  ‘simulation benchmark’ defined K La values of 10 and
3.5 hr-1.  In BioWin, K La is calculated (in units of hr-1) as follows:
KLa = C • USGY (4.10)
where:C = 0.250
Y= 0.771
USG= superficial gas velocity (m3 [m2-day]-1)
= Qair / bioreactor area
Given that the aerobic  ‘simulation benchmark’ bioreactors have a volume of 1333 m3 and a depth of
4 m, a bioreactor area of 333.25 m2 can be calculated for each tank.  Equation 10 then can be solved for
Qair in units of m3 s-1.  The final aeration parameters to enter are /c41 and Beta that should both be set to
1 to achieve the required benchmark K La values (Figure 4.6).  Figure 4.7 shows the applicable dialogue
box (version 4.4b) for entering the air supply rate and Table 4.5 lists the required air flow rates toachieve the desired  ‘simulation benchmark’ defined K
La values.27
Figure 4.7: Bioreactor dialogue box (BioWin version 4.4b) for the AEROBE 1 reactor - see Figure 4.2  – showing the
required air supply rate to attain a K La of 10 hr-1 in that bioreactor.
Table 4.5: BioWin air flow rates needed to achieve the desired  ‘simulation benchmark’ KLa values.
Tank # Benchmark required K LaB i o W i n  Qair
(hr-1)( m3 s-1)
3 & 4 10 0.4614825
5 3.5 0.1182507
4.3.3 Simulation Output Verification
The final step in the  ‘simulation benchmark’ implementation procedure is the verification of the steady
state and dynamic simulation output.  To achieve the correct output, users will need to make twofurther adjustments.  The first relates to the waste and settler underflow flow rates and the secondrelates to a ‘bug’ in the steady state solver (note that this ‘bug’ appears only in older versions of
BioWin and subsequently has been rectified in version 5).
In a deviation from the defined benchmark flows, users should adjust the settler underflow flow rate to
18832 m
3 d-1 and the waste flow rate to 386 m3 d-1.  The change results in a 1 m3 d-1 increase in waste
flow rate, but maintains the recycle flow rate at the defined rate of 1x average Qin (18446 m3 d-1).
These changes are necessary to achieve the proper sludge age, and as a result, the proper output data.The difference in the BioWin settler model is the suspected cause and although attempts have beenmade here to achieve similar behaviour, clearly the model output is not precisely the same, as indicatedby Figure 4.1and Figure 4.4.  The exact reason for this minor change in waste flow rate is unknown,
but the change is necessary to achieve the benchmark defined results.
The second simulation issue to address is a numerical ‘bug’ caused by a numerical ‘shortcut’ used to
solve the BioWin settler under steady state conditions. The effect of this ‘bug’ is a small discontinuityin the soluble components when a dynamic simulation immediately follows from a steady statesolution.  The ‘bug’ does not appear to effect the steady state results as these are correct, but anobserved discontinuity appears in the first dynamic time step following the steady state solution.  Thediscontinuity is avoidable using the following procedure to set up the settler state variables correctly.
To overcome the dynamic discontinuity in the soluble components:
i) Determine the steady state solution using the steady state solverii) Set-up a constant influent ‘*.din’ file and dynamically simulate the steady state solution, whichshould take approximately three sludge ages (25 days).  [Most of the ‘bug’ effect is removed within acouple of simulation days, but to return to the exact steady state solver solution a simulation time closerto three sludge ages will be required.  That is, during this ‘dynamic’ steady state simulation, the outputwill jump away from the steady state solution in the first time step, then slowly return to the valuesgenerated with the steady state solver.]
These steps will remove the effect of the ‘bug’ such that the dynamic weather file simulations can be
performed from this ‘dynamic’ steady state without any discontinuity appearing in the output file.  Itshould be made clear though, that this ‘bug’ appears only in older versions of BioWin and has beenfixed in version 5.  However, benchmark users should follow this procedure to correctly set-up olderversions of BioWin for the dynamic simulations.284.4 BASIC CONTROL STRATEGY - BIOWIN
No attempt has been made to implement the ‘basic control strategy’ into BioWin.
4.5 CONCLUSION
Tuning BioWin to the  ‘simulation benchmark’ specifications is a relatively simple task once some of
the specific BioWin features are understood.  The most challenging part of the tuning process relates tounderstanding the BioWin settler model and its relationship to the benchmark specified settling modelbecause these two models are not the same nor do they have the same numerical structure.  It is not thepurpose of this work to determine which model is more appropriate, but it is essential that they behavesimilarly if benchmark usable results are to be attained using BioWin.  The settler model impact can beovercome through several deviations from the benchmark description including the use of different
model parameters, and some minor configuration changes.  In addition to the model differences,
‘simulation benchmark’ users need to be aware of several BioWin specific features related to aeration,
and setting up the proper structure for dynamic influent files.  That is, to achieve benchmark consistentresults, users must be aware of how to overcome the differences between BioWin and the benchmarkdescription to tune their software tool to the benchmark specifications.  This chapter has outlined theBioWin specific procedures that should ensure tuning to the benchmark specifications and thus result inthe benchmark defined results.
4.6 ACKNOWLEDGEMENTS
The information contained in this chapter was compiled from various sources including personal
experience with the software, the BioWin User Manual, and BioWin Technical Notes.  Further,understanding some of the specific BioWin features would have been very difficult without input fromEnviroSim Associates Ltd. principals, Peter L. Dold and Mark Fairlamb, hence their contributionshould be fully acknowledged.295 
FORTRAN described by M.N. Pons, J.F. Beteau & J.M. LeLann
FORTRAN has been recognised for years as a powerful programming language for scientific
applications. It was therefore rather straightforward to consider its use for the benchmark'simplementation. For this purpose the verbal description of the benchmark has to be transformed into aset of ordinary differential equations (ODEs), with adequate initial values:
() () ()() tttfdtdvuxx,,=  where x is the state vector, u the control vector (oxygen transfer coefficient
in the last aerated compartment and internal recycle flowrate) and v the perturbation vector (influent
characteristics and flowrate)
On one hand FORTRAN permits to rigorously translate the mathematical description of the benchmark
into a set of code lines and to simulate the plant operation without any further plant assumption. On the
other hand, the user-friendliness is restricted, especially for data management. Many typing (andprogramming) mistakes can be done, especially for the biological section. An integration algorithm isneeded to solve the set of ordinary differential equations: it should be selected and its code should bewritten or obtained from an external source and tested. Similarly a random number subroutine shouldbe found to deal with the noise generation of the sensors.
It might be interesting to introduce some generalisation with respect to the basic description of the
benchmark: The user may want to modify the total number of compartments and the number of non
aerated compartments, as well as the number of layers in the clarifier and this can be done very easily
by over-parametrisation or dynamic allocation.
A very basic version can be written in FORTRAN 90, using the Microsoft Development Studio
package for example and run in a DOS window. However a Digital Visual Fortran version, whichincludes an user-friendly interface and graphical result output, might be preferred in the long term.
A complete simulation run contains three phases: a stabilisation period under constant input conditions
(the average values) (simulation phase I), followed by a period of 14 days of stabilisation using the dry
weather file (simulation phase II) and finally the period of 14 days corresponding to the weather file tobe tested (simulation phase III). The duration of the stabilisation period under constant input conditionshas been defined to be 100 days when the initial values are the default ones given in the program. But itcan be shortened if the state variables under constant input conditions obtained in a previous run havebeen saved. This can  save some simulation time.
A general flowsheet is proposed in Figure 1 and contains four main sections: initialisation, calculation
of the time-derivatives, integration procedure and output management. In our implementation the
output routine works with time thresholds, that trigger various events such as control actions, sludge
age calculation, performance evaluation and storage in the result files, and that are incremented afterevent triggering.
Considering the number of variables and constants, it is recommended to use a declaration file: to
minimise the errors between the subroutines. all the declarations (types of variables, variables in namedCOMMONs) are stored in a file (variab.def), included at the beginning of each subroutine. This is agood way to minimise the errors of transfer of information between the subroutines30SUBROUTINE XXX
IMPLICIT NONEINCLUDE ‘variab.def’
The first step of the initialisation section would classically consist in reading all the data files: except
the weather files available on the website, all the data files are filled by a standard text editor software.Due to the number of data, one may organise them in several files, according to the type of informationthey describe: plant data (total number of reactors, number of non aerated reactors, volumes of theaerated zone and of the non aerated zone, clarifier characteristics, etc), biomodel parameters, settlingparameters, control loops (sensors characteristics, controller parameters), weather file name, event timesteps, choice of integration routine, etc.
There are different ways to manage the weather files: generally two of them have to be used, one for
the dynamic stabilisation phase and another for the performance assessment. It should be noticed thatall the weather files start at time 0. Some time rearrangement has to be made and it might be useful todo it once at the beginning and use a large matrix to store the influent characteristics and flowrate. Aninterpolation routine is necessary to recalculate the characteristics at times when they are not given,when needed by the integration routine.
Different initialisations should be performed at this stage: cumulative variables, time counters and state
variables. As mentioned previously the initial state variables can either be read in a file or default
values can be used. The default values are guesses that are made by the user, such as the biodegradable
pollution is decreasing along the biological reactor, a “reasonable” value of the heterotrophic biomassfor such a system is of the order of 3 g/l and so on ….
Whatever the integration routine, the time-derivatives of the state variables should be calculated at time
t. This part (together with the performance indices) will be the most tedious one to program and themost prone to (typing) errors. As described in Figure 2, in our implementation this section has beendivided in several subroutines. Due to the number of state variables (145) it is particularly dangerous touse generic names such as y(i) and dery(i), although they are generally required by the integration
routine. Equivalence subroutines can be called to transform the “numeric” variables into “physic” ones
before the calculation of the derivatives and to back-transform the “physic” variables into the“numeric” ones after. This has the apparent disadvantage of an increase in memory occupancy but ismuch more convenient for the programmer. When such a framework is used, the names of the “physic”variables are chosen to match those given in the benchmark description.
The system contains two sub-units (the bioreactor and the clarifier) coupled by recycle flows, that some
might find difficult to manage. No real difficulty was encountered. The corresponding flowsheets are
given in Figure 3. Beware that the layers in the clarifier are numbered from the bottom (layer 1) to the
top or free surface (layer m). Care should be taken for the dissolved oxygen balance in the bioreactor:its concentration should never be larger than the dissolved oxygen concentration at saturation (i.e. 8mg/l in the benchmark description) to avoid a transfer from the liquid phase to the gas phase. Thisshould of course never happen but it is a precaution with respect to the integration routine, which doesnot care about the physical meaning of the results.
The output section is triggered by the integration routine. It is recommended to verify the positiveness
of all the state variables. Then the time (current_time) is checked against five time event thresholds
(next_event_time(i), i= 1 to 5): dissolved oxygen control, nitrate control, sludge age calculation,
simulation phase, performance assessment. These actions are triggered with different time steps(event_time_step(i)):
for i = 1 to 5
if(current_time ≥ next_event_time(i)) then
do the action
increment next_event_time(i) by event_time_step(i)
end if
end do
This way to deal with the various discrete actions might be challenged. However it permits a rather
clear programming, event by event, of the output subroutine and new events are easy to add.31The choice of the integration routine requires some care. The biological system as the one described by
the benchmark is reputed to give stiff differential equations, that request special integration algorithms.A Gear algorithm was therefore initially selected and the code was extracted from the Harwell library.
As the problem contains a high number of state variables and as the differential equations are not easy
to manipulate, it was decided to opt for a numerical calculation of the Jacobian matrix although asymbolic software as MAPLE could have been used alternatively to generate its coding. Convergencewas indeed obtained for the simulation phase I but the steady-state values were not the correct ones.Another integration routine (DASSL) was also tested but the calculation time was unrealistic. Finally asimple Runge-Kutta 4
th order algorithm with fixed time-step was tested with success: the correct
steady-state values were obtained in a manageable calculation time. The initial time-step was 0.001 hr,which was later doubled, without loss of performance (i.e. the same steady-state values were obtained).
The integration routine was subsequently used with success for the two remaining simulation phases.
These indications should help the potential FORTRAN (or C)  programmer to produce quickly an
usable implementation of the benchmark.
List of Figures:
InitialisationParameters
Run conditions
Weather  files
State variablesTime counters
Cumulative performance criteria
Output managementIntegration routine Time derivatives
Positiveness of state variablesControl loops
Performance assessmentSaving the results on text filesSee Figure 2
Figure 1: General flowsheet
«Ma th»  t o  «P hy sic a l»
Influent characteristics at time t
Biological reactor
Clarifier
«Ph y s i c al» to  «Ma t h»i.e. y(i) and dery(i) into xs(j), xbh(j), ….
Interpolation with respect to time of
weather files data
See Figure 3
See Figure 3
i.e. xs(j), xbh(j ..., into y(i) and dery(i)
Figure 2: Flowsheet for the time-derivative calculation32Ratios insoluble state variables / total suspended solids known at time t- Δt
Recycle composition:
Insoluble  state variables from total suspended solid at clarifier bottom layer, knowing the ratios
Soluble state variables from soluble state variables at clarifier bottom layer
For each compartment (1 to n):
• calculation of the biological rates
• calculation of the derivatives
Ratios insoluble state variables / total suspended solids calculated at time t from state variablesin last compartment of the biological reactor
Calculation of fluxes of solids from one layer to the previous (settling zone) or the next
(clarification zone)
For each layer (1 to m):
• calculation of the total suspended solid derivative
• calculation of the soluble state variables derivativesBiological reactor
Clarifier
Figure 3: Flowsheet for the bioreactor and clarifier time-derivatives
References
HarwellGear
Reference for Runge-Kutta: Press, W.H., Flannery, S.A., Teukolsky S.A., Vetterling W.T. (1992)
Numerical recipes in FORTRAN. The art of scientific computing. Cambridge University Press,Cambridge
Reference for DASSL: Brenan, K.E., Campbell S.E., Petzold L.R. (1989) Numerical solution of initial
value problem in differential-algebraic equations. North-Holland, New-York.. Code available on
http://www.netlib.no/336 
GPS-X™ described by John B. Copp
NOTE: The issues and procedures outlined in this chapter are specific for the use of GPS-X with the  ‘simulation
benchmark’ and in no way should be interpreted as necessary procedures for using GPS-X for any other purpose.
GPS-X is a modular, multipurpose modelling environment for the simulation of wastewater treatment
systems.  To tune GPS-X to the benchmark specifications users should be aware of several GPS-Xspecific features and options.  The implementation of the  ‘simulation benchmark’ into GPS-X is
relatively straightforward, but to achieve benchmark consistent results, users must be aware of how toovercome the differences between the simulator and the specifically defined  ‘simulation benchmark’
description.
In particular, this chapter outlines the changes that should be made to some of the GPS-X default
settings to achieve benchmark consistent results.  Further, parameter values for several important‘simulation benchmark’ variables are explained and derived specifically for GPS-X.  A ‘fix’ for a
model error is presented, a potential influent data read-in problem is discussed and an unresolvabledeviation in the settler models is pointed out.  Finally, a GPS-X specific alternative to the  ‘simulation
benchmark’ defined simulation procedure is proposed.
6.1 CONFIGURATION ISSUES – GPS-X
Set-up of the  ‘simulation benchmark’ configuration using the GPS-X user interface can be done in
several ways.  Figure 6.1 shows one alternative using five CSTR objects, a 3-way combiner  object, a
circular secondary clarifier  object, two discharge  objects and an influent object as well as the various
connections .  It should be made clear that this is only one option.  For instance, users may choose to
use a plugflow tank  object rather than the CSTR objects.  Nevertheless, the results of the simulations
should be independent of the layout used provided the modelling options are entered correctly.
Table 6.1: GPS-X process models to be used with the ‘simulation benchmark’ .
Process GPS-X model
Biological iawprc
Settling noreac1d
Using the ‘cnlib’ macro library, users next will need to assign models to the process objects.  Table 6.1
shows the GPS-X process models to be used (note that when assigning the process models, it isrecommended that the GPS-X ‘sourcing’ option be used so as to minimise the potential for parameter
input errors).  Once the configuration is ‘drawn’ and the models have been assigned, users should input
the physical and operational data for each tank as specified in the benchmark description.
GPS-X™ is a trademarked product of:
Hydromantis Inc., 1685 Main St. West, Suite 302, Hamilton, Ontario, CANADA L8S 1G5
tel: (905) 522-0012fax: (905) 522-0031web: www.hydromantis.com34
Figure 6.1: Interface layout of the COST  ‘simulation benchmark’ plant in GPS-X (Version 2.3.1).
6.2 MODEL ISSUES – GPS-X
The ‘simulation benchmark’ specifies two process models: the IAWQ Activated Sludge Model #1 -
ASM1 (Henze et al., 1987) for the biological processes and the double-exponential settling function of
Takács et al., (1991) for the settling process. The GPS-X models specified in Table 6.1 are consistent
with those required by the ‘simulation benchmark’ , but users should be aware of the subtle differences
in these models as compared to those specified in the benchmark description.
6.2.1 Biological Process Model
Table 6.2  lists the state variables and symbols used in ASM1 and the GPS-X ‘iawprc’ model.  The
variables and symbols are essentially identical, but users should note that GPS-X uses the symbol XU
for the ‘particulate products arising from biomass decay’ whereas ASM1 uses XP.
Table 6.2 : Comparison of state variable symbols used in ASM#1 and in the GPS-X ‘iawprc’ model.
State Variable Description ASM1 Symbol GPS-X Symbol Units
Soluble inert organic matter SI SI g COD m-3
Readily biodegradable substrate SS SS g COD m-3
Particulate inert organic matter XI XI g COD m-3
Slowly biodegradable substrate XS XS g COD m-3
Active heterotrophic biomass XB,H XBH g COD m-3
Active autotrophic biomass XB,A XBA g COD m-3
Particulate products arising from biomass decay XP XU g COD m-3
Oxygen SO SO g COD m-3
Nitrate and nitrite nitrogen SNO SNO g N m-3
NH4+ + NH 3 nitrogen SNH SNH g N m-3
Soluble biodegradable organic nitrogen SND SND g N m-3
Particulate biodegradable organic nitrogen XND XND g N m-3
Table 6.3  lists the stoichiometric parameters to be used in the ‘iawprc’ model.  These are listed in the
order that they appear in the GPS-X dialogue box and include two ratios not defined in the ‘simulation
benchmark’ : ‘VSS/TSS ratio’ and ‘BOD5 to BOD ultimate ratio’.  The required VSS/TSS ratio is
calculated from the benchmark specified TSS/CODp ratio of 0.75 and the benchmark specified
CODp/VSS ratio of 1.48.  By combining these specified ratios, it is possible to calculate the required
VSS/TSS ratio (i.e. VSS/TSS = 1/(0.75 * 1.48)).  The BOD ratio can be left at its default value of 0.66.35Table 6.3:  ‘Simulation benchmark’ stoichiometric parameters for ASM1 and the GPS-X ‘iawprc’ model
(n/s not specified).
GPS-X Description ASM1
SymbolBenchmark
ValueGPS-X
ValueUnits (using ASM#1 nomenclature
where necessary)
fractions
particulate COD to VSS ratio fcv 1.48 1.48 g COD g VSS-1
VSS/TSS ratio - n/s 0.9009 g VSS g TSS-1
BOD5 to BODultimate ratio - n/s 0.66
heterotrophs
Yield YH 0.67 0.67 g XBH COD formed (g COD oxidised)-1
N content of active mass iXB 0.08 0.08 g N (g COD)-1 in biomass ( XBA & XBH)
N content of endogenous mass iXP 0.06 0.06 g N (g COD)-1 in Xp
Endog. Residue fP 0.08 0.08 dimensionless
autotrophs
Yield YA 0.24 0.24 g XBA COD formed (g N oxidised)-1
Table 6.4  lists the kinetic parameters to be used with the ‘iawprc’ model in the order that they appear in
the GPS-X dialogue box.  These values are identical to those specified in the ‘simulation benchmark’ .
Table 6.4:  ‘Simulation benchmark’ kinetic parameter values for the GPS-X ‘iawprc’ model.
GPS-X Description ASM1
SymbolGPS-X
ValueUnits (using ASM1 nomenclature
where necessary)
heterotrophs
Maximum specific growth rate µH 4.0 day-1
Half saturation coefficient KS 10.0 g COD m-3
Organism decay rate bH 0.3 day-1
Anoxic hydrolysis factor ηh 0.8 dimensionless
Anoxic growth factor ηg 0.8 dimensionless
Maximum spec. hydrolysis rate kh 3.0 g XS (g XBH COD·day)-1
Hydrolysis half saturation KX 0.1 g XS (g XBH COD)-1
Ammonification rate ka 0.05 m3 · (gCOD day)-1
autotrophs
Maximum specific growth rate µA 0.5 day-1
Half saturation coefficient KNH 1.0 g NH 3-N m-3
Organism decay rate bA 0.05 day-1
switching functions
Heterotrophic O2 half.sat. KO,H 0.2 g O 2 m-3
Autotrophic O2 half.sat. KO,A 0.4 g O 2 m-3
Nitrate half sat. KNO 0.5 g NO 3-N m-3
The GPS-X ‘iawprc’ model is ASM1 and is consistent with the required  ‘simulation benchmark’
model, but the ‘iawprc.asp’ file may contain a model error that needs correcting (note: this file error isknown to exist in GPS-X versions up to 2.4.  Users of later versions should check for this error and
correct it if necessary).  The error appears in the oxygen rate equation (rso&o =…) and has the effect of
eliminating the influence of K
NH on this calculated rate.  Although this is a minor problem it needs
correcting if the benchmark results are to be duplicated.  Equation 6.1 shows the incorrect equation andEquation 6.2 shows the corrected equation.  Users should either delete the incorrect equation andreplace it with the corrected equation or ‘comment out’ the incorrect equation using a ‘!’ character atthe start of the line and add the corrected equation.
INCORRECT
 rso&o = mrso&o*bso&o/(koh&o+bso&o) (6.1)
CORRECTED  rso&o = -(1.0-yh&o)/yh&o*mr1&o*bso&o/(koh&o+bso&o)& (6.2)
             -(4.57-ya&o)/ya&o*mr3&o*bso&o/(koa&o+bso&o)
To make this correction users will need to edit the process rates.  The reader is referred to the GPS-X
User’s Guide for more information on this procedure, but Figure 6.2 shows an illustrative example ofthe editable process rate dialogue box.36
Figure 6.2: Illustrative example showing the process rate equation dialogue box that will need to be accessed to
examine the process rate equations.
6.2.2 Settling Model
The double-exponential settling velocity function of Takács et al. (1991) was chosen as the  ‘simulation
benchmark’ settling model due to its wide use and apparent acceptability as a fair representation of the
settling process.  The parameters in the Takács function and the associated values to be used are listedin Table 6.5.  The table lists the parameters, giving a description of the parameters, the associatedsymbol and the parameter units.  Also given in the table are the model parameter values to be used inany benchmark work.
Table 6.5:  ‘Simulation benchmark’ settler model parameters and their associated values.
Parameter Description Parameter
SymbolValue Units
Takács Function
Maximum settling velocity v'o 250 m day-1
Maximum Vesilind settling velocity vo 474 m day-1
Hindered zone settling parameter r h 0.000576 m3 (g SS)-1
Flocculant zone settling parameter r p 0.00286 m3 (g SS)-1
Non-settleable fraction f ns 0.00228 dimensionless
The ‘noreac1d’ settling model specified for GPS-X users is essentially the model required by the
benchmark, but users should be aware of one important difference.  The  ‘simulation benchmark’
specified settler is a 10-layer non-reactive settler, which is consistent with the ‘noreac1d’ model.
However, it is assumed in the benchmark settler, that both the solids and solubles will be subjected to
the 10-layer configuration.  This is not the case with the ‘noreac1d’ model.  In this GPS-X model, thesolids and the settling processes are modelled using the 10 layers, but the solubles are not.  Instead, thesolubles are ‘subject to a complete mix zone’ (GPS-X Technical reference), in essence a 1-layerreactor.  This deviation has no effect on the steady state solution, but examination of this deviationunder dynamic conditions reveals that this approach has a ‘smoothing’ effect on the effluent data.  That37is, under dynamic conditions, users should be aware of the fact that less variability will be observed in
the GPS-X effluent data as compared to an identical system using a 10-layer soluble settler model.However, mass balance constraints ensure that, on average, this approach will have no effect on thedischarge mass on any soluble component.  Figure 6.3 shows the differences in effluent variability for
ammonia ( S
NH) using a 10-layer soluble settler (i.e. ideal benchmark case), a 1-layer soluble settler (i.e.
the ‘noreac1d’ model) and a 0-layer soluble settler (i.e. the solubles are mapped directly to the effluentwithout accounting for the settler volume).  This deviation from the benchmark description isunfortunate, and users should be aware of this deviation, but as there is no suitable alternative inGPS-X, users need not try to correct it.
Figure 6.3: Illustrative example of the impact of the number of soluble settler layers on the effluent variability of a
soluble component.
Figure 6.4 shows the ‘physical’ dialogue box and its associated benchmark parameter values for the
settler.  In particular the reader’s attention is drawn to the settler feed point of 2.2 m.  This distancepinpoints the settler feed to the middle of the 6
th settler layer and is consistent with the benchmark
description.
Figure 6.4 : ‘Physical’ dialogue box for the settler showing the required settler feed point depth.
6.2.3 Dissolved Oxygen Modelling
Two aspects of dissolved oxygen (DO) modelling in GPS-X should be addressed.  These include the
calculation of DO saturation and DO modelling in the return sludge stream from the underflow of thesecondary settler.
The ‘simulation benchmark’ specifies a DO saturation concentration of 8 g m
-3, but achieving this with
GPS-X requires a comprehensive understanding of how GPS-X calculates its saturation concentration.Table 6.6 provides a listing of the DO saturation variable values that are required for the ‘simulation
benchmark’ , but the following equations are presented to explain their origin.  The DO saturation
concentration in GPS-X is calculated using the following equation:382O
HenryOP uc
SOST2•••
=ρβ
(6.4)
where: - SOST is the saturation concentration of DO (gO 2 m-3)
-uc is 1777.8 (gO 2 m-3 H2O)
- is the salts and ions correction factor
-  is the density of water (kg m-3)
- PO2 is the partial pressure of oxygen (atm)
- HenryO 2 is the Henry’s Law constant for DO (atm)
The Henry’s Law constant is calculated as follows:
HenryO 2= (708.0 /c194/c3 /c55/c12/c3 /c14/c3/c21 /c24/c26/c19/c19 /c200 T = 20oC assumed (6.5)
= 39860
with the density of water calculated using the following equation:
= 999.96 + (2.29 x 10-2 /c194/c3/c55 /c12/c3/c177/c3 /c11/c24/c17/c23 /c23/c3/c91/c3/c20 /c19-3 /c194/c3/c552) /c200 T = 20oC assumed (6.6)
= 998.242
and the partial pressure of oxygen calculated using:
PO2 



•••+• =2101325g depthP FractionOatm2ρ/c200 Patm = 1 assumed (6.7)
= 0.21 /c200 depth = 0 m
For these DO saturation calculations, the use of ‘global settings’ is recommended.  The values
calculated above should be entered in the ‘physical’ dialogue box of the GENERAL DATA  menu.  Figure
6.5 shows the applicable dialogue box and the required benchmark settings.
Figure 6.5 : The GENERAL DATA menu ‘physical’ dialogue box showing the required DO parameter values to
achieve a DO saturation concentration of 8 g m-3.
Using the values calculated above and Equation 6.4, it is possible to calculate the required  correction
factor to achieve a DO saturation concentration of 8 g m-3.  This value (Table 6.6) can then be entered
in the ‘operational’ dialogue box for each reactor.39Table 6.6: GPS-X required DO related parameter values needed to achieve the  ‘simulation benchmark’ required DO
saturation concentration of 8 g m-3.
DO Related Parameter Benchmark Required Value Units
Tank depth 0 m
Liquid temperature 20oC
Air temperature 20oC
Oxygen fraction in air 0.21 -Beta factor (for DO saturation) 0.855636 -
One further DO modelling parameter needs to be specified correctly to complete the DO modelling
issues related to the benchmark (Figure 6.6 ).  This last parameter, ‘critical sludge blanket level’ relates
to the modelling of DO in the return sludge flow from the underflow of the clarifier and ‘is used to
define the height of the sludge blanket in order for the dissolved oxygen in the underflow and pumpedstreams to be zero’ (GPS-X Technical Reference).  That is, with this parameter, users define a sludgeblanket height that if exceeded will result in DO in the underflow and pumped flow streams being set tozero.  However, this can be avoided by specifying a ‘critical sludge blanket level’ that is greater thanthe height of the clarifier.  This way the simulated sludge blanket height will never exceed the definedlevel and the DO in these two streams will never be set to zero.  Figure 6.6 shows a ‘critical sludgeblanket level’ of 5 m, but any value greater than 4 m will ensure that the simulated system conforms to
the benchmark specifications.
Figure 6.6 : One screen of the settler ‘operational’ dialogue box showing the last DO modelling parameter of interest
to the ‘simulation benchmark’ : ‘critical sludge blanket level’.
6.3 SIMULATION ISSUES – GPS-X
At the simulation stage, users should be aware of several numerical factors and a number of
adjustments are suggested.  In particular, these adjustments relate to the criteria used for determiningsteady state, the communication time interval used during dynamic simulations and an influent dataread-in problem (versions of GPS-X prior to 3.0) that may need correcting.
NOTE: Although an investigation revealed that the choice of ‘numerical solver’ had no effect on the output data, it is
suggested that users employ the Gear’s Stiff numerical solver for  ‘simulation benchmark’ work.
The criteria used by the steady state solver impacts on the reproducibility of the calculated steady state
such that with less tolerance allowed, more consistent results will be produced.  Figure 6.7 shows the
suggested parameter values for the ‘steady state’ dialogue box of the GENERAL DATA  menu.  In
particular, attention is drawn to the ‘error limit on individual variables’ and the ‘iteration terminationcriteria’, which have both been lowered from the default values.  It is suggested that these changes beimplemented to increase the constraints on the steady state solver and thereby result in a moreconsistent and repeatable (to several decimals) steady state solution.40
Figure 6.7 : One screen of the GENERAL DATA menu ‘steady state’ dialogue box showing several suggested
changes (from defaults) for the steady state solver.
The ‘simulation benchmark’ influent data files are 14 days long, but in total, 28 days of dynamic
simulation (following steady state) are required for each weather simulation.   That is, the specified
dynamic simulation procedure indicates that following the achievement of steady state, the systemshould be simulated dynamically for 14 days using the dry weather  data file.  After saving the system
in the state achieved after this 14 days, each of the 14-day weather files (dry, rain & storm) is to be
used, each time starting from that saved state.  Two possibilities exist for executing these simulations.The first option involves using the ‘Savestatus’ and ‘Readstatus’ commands found in the ‘SETUP’menu of the simulation control  dialogue box (Figure 6.8).  After running the first 14-day dry weather
simulation, the ‘Savestatus’ command can be used to save the achieved states in a file.  Then, prior toeach of the weather file simulations, the ‘Readstatus’ command can be used to reinstate those valuesfrom the file (it should be obvious that the ‘STEADY STATE’ check box must be unchecked for the‘Readstatus’ command to have the desired effect).  If the user is uncomfortable with this procedure analternative procedure can be used.   The alternative involves creating three new influent files, each of
which contains 28 days of dynamic data (dry-dry, dry-rain & dry-storm).  By using these files and the
steady state solver option, each weather file simulation can be achieved in one step, using one click ofthe ‘START’ button in the simulation control  dialogue box, which is shown in Figure 6.8.
Figure 6.8 : ‘Simulation control’ dialogue box showing the use of the steady state solver option, the use of the
necessary 0.25001 hours ‘communication interval’ and the 28-day simulation time.
According to the ‘simulation benchmark’ , the dynamic output data should be analysed at 15-minute
intervals, which suggests a ‘communication interval’ of 0.25 hours (or 15 minutes) and is normallyinput in the ‘simulation control’ dialogue box (Figure 6.8).  However, when this interval is explicitlyentered, problems with the output data are observed.  An analysis of the output data suggests thatrounding errors result in the loss of several seconds over the course of a simulation.  This causes the41output data to be incorrectly recorded in the output file.  As this has an impact on the performance
index calculations, it is recommended that a ‘communication interval’ of 0.25001 hours be usedinstead.  This eliminates the output data problem and adds less than 45 seconds to a 28-day simulation.
The last issue to be addressed is a minor problem that may appear in the influent data read-in.  The
benchmark influent data is specified to a maximum of 5 significant figures, but GPS-X versions priorto 2.4.1 allow a maximum of 4 significant figures for influent data.  This results in the rounding of allinfluent flows for example.  It also causes differences to appear between the expected mass fluxes andthe simulated mass fluxes.  Users can test for this problem by dynamically simulating for an hour andchecking the reported influent, waste and effluent flows against the flows that are expected.  With theproblem, all the influent flows will be rounded to the nearest 10 m
3 d-1.  If this problem is discovered it
must be fixed, but Hydromantis is aware of this potential problem with older versions of the software
and has developed a solution, which is available directly from them.
6.4 BASIC CONTROL STRATEGY – GPS-X
Once users become familiar with the structure of GPS-X and how user defined code is incorporated
into the executable code, it becomes a relatively straightforward task to implement the basic controlstrategy into GPS-X.
Each reactor object in GPS-X has a pre-defined dissolved oxygen control algorithm, which can be
accessed through the reactor’s operational  dialogue box.  The applicable dialogue box for tank 5 is
shown in Figure 6.9.  The velocity PI controller is consistent with the one specified in the ‘simulation
benchmark’  and should be used here for DO control.
Figure 6.9: Operational dialogue box for tank 5 with implemented DO control.
To implement the nitrate control, users will need to write a few lines of FORTRAN code in the
layout.usr file and combine this code with the pumped flow controller associated with the 5th tank.
Figure 6.10 gives an example of code that might be used to add noise and delay.  In this example,tdelay is defined in the layout.con file and has an equivalent value of 10 minutes.  The routine tracks
the simulation time in terms of time blocks (based on the value of tdelay) and effectively delays the
nitrate reading through two variables ( delayedno3anox2  and conno3anox2 ).  The first variable,
delayedno3anox2,  stores the previous time block nitrate concentration plus noise and the second
variable, conno3anox2 , is used as the controlled variable.  Only after the next time block is detected
does conno3anox2  get updated with the nitrate value observed 10 minutes previously.  In this way, the
variable conno3anox2  represents the presumed sensor reading that has been delayed with noise added.
In the example shown in Figure 6.10, the GAUSS function is used to generate the random noise applied
to the nitrate value.  It should be noted that according to the ACSL manual, this function can beimplemented to two ways, but when it was implemented in the other way, it did not work.  The reason
for this is unknown.  In addition, ACSL includes the OU function, which can be used to generate
random numbers.  However, as with the alternative GAUSS implementation, the OU function did not42work as expected.  Hence, it is recommended that users add noise using the GAUSS function as
presented in Figure 6.10.
!***********************************************************************
macro userderivativesection
!DERIVATIVE SECTION
if (t.eq.0) then
tbcounter = 0
endif
timeblock = INT((t/tdelay*1000+1)/1000)
if (tbcounter.eq.0) then
conno3anox2 = snoanox2
delayedno3anox2 = snoanox2
savedtimeblock = timeblock
tbcounter = tbcounter + 1
else
if (timeblock.gt.savedtimeblock) then
GAUSS(noise=0,0.1)
savedtimeblock = timeblock
conno3anox2 = delayedno3anox2
delayedno3anox2 = snoanox2+noise
endif
endif
Figure 6.10: Example of FORTRAN code used in the layout.usr file to add noise to the observed nitrate concentration
and delay that concentration by 10 minutes.
The second step in the control strategy implementation is to set-up the pumped flow control algorithm
associated with the 5th tank.  Figure 6.11 shows the applicable dialogue boxes.  In this figure, the input
terms are not entirely clear, but the control variable is conno3anox2  and the controller sampling time is
0.0069444 days (i.e. 10 minutes).
 
Figure 6.11: Dialogue boxes showing the implementation of the nitrate controller.
6.5 CONCLUSION
Tuning GPS-X to the  ‘simulation benchmark’ specifications requires that users be aware of how to
overcome the differences between the simulator and the specifically defined ‘simulation benchmark’ .
This involves being aware of several GPS-X specific features, options and calculation methods.Specifically, this chapter has explained several specific GPS-X variables and outlined several changesthat should be made to some of the GPS-X default settings.  Also explained was a ‘fix’ for a model
error, a potential influent data read-in problem and an unresolvable deviation in the settler models.
Finally, a GPS-X specific alternative to the  ‘simulation benchmark’ defined simulation procedure was
proposed.  Nevertheless, with this knowledge at hand, it is a relatively straightforward task toimplement the  ‘simulation benchmark’ into GPS-X, and thereby achieve benchmark consistent results.436.6 ACKNOWLEDGEMENTS
The information contained in this chapter was compiled from various sources including personal
experience with the software, and the GPS-X User Manual and Technical Reference.  Also, input from
Ulf Jeppsson and Hydromantis employees, Imre Takács, Bruce Gall and Eric Giroux should be fully
acknowledged.447 
MATLAB™ & Simulink™ described by Ulf Jeppsson
NOTE: The issues and procedures outlined in this chapter are specific for the use of MATLAB/Simulink with the
‘simulation benchmark’  and in no way should be interpreted as necessary procedures for using MATLAB/Simulink
for any other purpose.
MATLAB (MATrix LABoratory) is a general, high-performance language for technical computing. It
integrates computation, visualisation and programming in a common environment. MATLAB is aninteractive system and includes a large library of predefined mathematical functions. It also providesthe user with the possibility to extend this library with new functions. The code for such functions arebased on mathematical notation and can often be formulated in a fraction of the time it would take towrite similar programs in a scalar language, such as C or Fortran. Today, MATLAB is available formost hardware platforms (except for Macintosh computers where version 5.2 released in 1998 was the
last one) and is considered to be one of the most fundamental software tools at many technical
universities as well as industries all over the world.
MATLAB features a family of application-specific toolboxes that extend the MATLAB environment in
order to solve particular classes of problems. Areas in which toolboxes are available include signalprocessing, control systems, optimisation, neural networks, system identification, statistics, symbolicmathematics and many more (approximately 30 toolboxes in total). Furthermore, it is possible to useMATLAB for on-line applications, to build application-specific graphical user interfaces and to createstandalone (and platform independent) applications by automatic translation of MATLAB programs
into C code. The wide field of applications that the toolboxes support is definitely one of the major
advantages of MATLAB.
Simulink is an add-on software product to MATLAB for modelling, simulating and analysing any type
of dynamic system. MATLAB and Simulink are completely integrated, which means that all thefunctionality of the MATLAB toolboxes is available in the Simulink environment as well. Simulinkprovides a graphical user interface for building models as block diagrams and manipulating theseblocks dynamically. It handles linear, non-linear, continuous-time, discrete-time, multi-variable and
multi-rate systems. A large number of predefined building blocks are included and it is easy for the
user to extend the functionality by customising these blocks or creating new ones. The models aresimulated using a choice of integration algorithms, either from the Simulink menus or MATLAB’scommand window. The simulation results can then be put into the MATLAB workspace for post-processing and visualisation. Finally, the capabilities of Simulink may be further extended by the use ofS-functions (system functions). S-functions can be written in the MATLAB language, C or Fortran,using a predefined syntax and allow users to add their own algorithms to Simulink models.Consequently, existing C or Fortran code may easily be incorporated and a dynamic system can bedescribed as a mathematical set of equations instead of using block diagrams. The use of S-functions
also has some implications with regard to performance, as will be discussed later in this chapter.
MATLAB™ and Simulink™ are a trademarked products of:
The MathWorks, Inc., 24 Prime Park Way, Natick, MA 01760-1500, USA
tel: (508) 647-7000fax: (508) 647-7001web: www.mathworks.com45The implementation of the  ‘simulation benchmark’ in MATLAB/Simulink is relatively straightforward,
but to achieve benchmark consistent results and good overall performance, users should be aware ofcertain aspects of the specifically defined  ‘simulation benchmark’ description. These have an impact on
how the simulations should be carried out using MATLAB/Simulink.
This chapter suggests one possible way of implementing the  ‘simulation benchmark’ using
MATLAB/Simulink to achieve consistent benchmark results. In particular, problems related toperformance, algebraic loops, noise, delay, numerical solvers, hybrid systems, etc. are discussed andshort code examples and illustrations are provided to enhance the understanding. However it should bemade clear that other alternatives may work equally well.
7.1 CONFIGURATION ISSUES – MATLAB/SIMULINK
Set-up of the  ‘simulation benchmark’ configuration using the Simulink user interface can be done in
several ways. Figure 7.1 shows one alternative using five bioreactor objects, two 2-way flow-combinermodels, a 2-way flow-splitter model and a secondary clarifier model, all implemented as C-code S-function objects. Furthermore, a hydraulic delay model (to avoid algebraic loops) and modelsdescribing the nitrate sensor and the controllers for internal recirculation flow rate and oxygenconcentration are used together with various connections and input blocks (plant input data andconstants from the MATLAB workspace). It should be made clear that this is only one option.Nevertheless, the results of the simulations should be independent of the layout used provided themodelling options are entered correctly.
Figure 7.1: Interface layout of the COST  ‘simulation benchmark’ plant in Simulink (version 3.0).
It is recommended that all model parameters, initial state variable values, plant input data, etc. beloaded into the MATLAB workspace before simulations are initiated and read from the Simulinkenvironment using the name of the parameter rather than providing the explicit parameter value inSimulink. Special initialisation m-files should be used for this purpose. All values are then easilyaccessible in text files instead of having to find the correct Simulink block to modify each time acertain parameter value needs modification.
7.2 MODEL ISSUES – MATLAB/SIMULINK
The required models describing the reactions in the biological reactors and the settler can be
implemented in three different ways. Firstly, the graphical user interface of Simulink may be used to
build the models as block diagrams. Secondly, the MATLAB language can be used to build the modelsusing a mathematical notation and the models can then be incorporated into the Simulink environmentby the S-function block. Thirdly, a traditional scalar programming language (C or Fortran) can be usedand when the code has been compiled (using an external compiler – a compiler is not included inMATLAB) the models may be included into Simulink by the use of the S-function block.46Using the graphical user interface is convenient for people who do not have significant experience
writing mathematical models. However, when the models are highly complex, as is the case for the‘simulation benchmark’ , where the total number of state variables is approximately 150, the graphical
description is not recommended. The block diagrams become so complex that programming errors are
almost unavoidable and the errors are extremely difficult to find.
Using the MATLAB language is the easiest and most straightforward way to implement complex
mathematical models for an experienced modeller. Unfortunately there is one major drawback –performance. MATLAB is an interpreting language, which means that every single line of an m-file isread and executed one after the other. This makes MATLAB slow compared to compiling languages(like C or Fortran) where all the code that is needed is compiled into binary machine code and then
loaded into the CPU for execution. This problem does not appear when a model is built using only the
Simulink graphical blocks (if no MATLAB Fcn blocks are used). However, every time a MATLABlanguage model is called from Simulink (by an S-function block), the MATLAB interpreter is called ateach time step and as the  ‘simulation benchmark’ is a dynamic, non-linear system this means that the
interpreter is called very often. Consequently, performance may drop by a factor of 10 if the use ofm-files is required by Simulink when a system is simulated.
Using a scalar programming language to implement the mathematical models is probably the most
difficult way, especially if the user has limited or no previous experience of C or Fortran programming.
However, if performance is an issue then it may well be worth the extra effort. Because the C or
Fortran code models are compiled before they are called by Simulink (by an S-function block) thesemodels do not have any negative effects on the overall performance of the simulation. As the‘simulation benchmark’ is a complex system using dynamic input data, which is to be simulated for a
significant amount of time it is recommended that the user implements the biological reactor model(Henze et al., 1987) and the settler model in C or Fortran. Note that once validated, these models may
be used in other types of wastewater treatment process simulations and need not be limited to the‘simulation benchmark’ . A C-code example of the biological reactor model using the S-function
predefined syntax is provided in Section 7.6.1.
A common problem when modelling the biological reactors of the  ‘simulation benchmark’ is that some
concentrations may show negative values during a dynamic simulation (which is obviously notphysically possible).  This may be caused by certain conditions and disturbances of the system incombination with the selected tolerance for the numerical solver, which allows the solver to take a timestep that may be slightly too large.  The problem is especially common for the oxygen concentrationand the nitrate concentration in the anoxic reactors and ammonia concentration in the aerobic reactorsbut may appear for other variables as well.  Once a concentration has become negative during a
dynamic simulation then none of the results can be trusted as a negative sign in one concentration will
immediately affect the other concentrations as well b ecause the process rate equations are dependent.
There is no built-in prevention of this in the ASM1 model, although the Monod-like process rateequations do help avoid this problem in most cases.  It is recommended that the problem be solvedusing the following principle at every integration time step:
1. Check if the value of any state variable is negative.
2. If this is the case, then use the value 0 instead only when calculating the process rate equations, i.e.
turn off the specific rate equations where the negative state variable is used.
3. Use the original values of all state variables when defining the differential equations, i.e. only
adjust the state variable values when calculating the process rate equations.
4. Do not use additional limitations for the actual state variables in the model output description.
This will work if all processes that are consuming a substance are also limited with regard to this
substance (e.g. by a Monod-like expression).  For the aerobic growth of heterotrophs this is not the casewith regards to the ammonia concentration and in some special cases (not for the ‘simulation
benchmark’ ) it may be necessary to add an extra Monod function for ammonia in this process rate
equation to avoid negative ammonia concentrations.  If the model outputs also are limited to a
minimum value of zero then this leads to incorrect mass balances. An example of how the aboveprinciple is implemented can be seen in the C-code example shown in Section 7.6.2 (the equations forproc1 to proc8 using the limited xtemp state vector).47Another common problem when modelling the  ‘simulation benchmark’ system is related to direct
feed-through, which in turn creates so called algebraic loops.  This generally occurs when an input to aSimulink block is driven by its own output, either directly or by a feedback path through other blockswith direct feed-through. When a model contains an algebraic loop, Simulink calls a loop solving
routine at each time step.  The loop solver performs iterations to determine the solution to the problem
(if possible). As a result, models with algebraic loops run much slower (or not at all) than modelswithout them.  For the  ‘simulation benchmark’ the problem is related to the hydraulic flow through the
reactors. No consideration is taken to how the flow propagates through the system, instead all flow-ratevariations are instantaneous with no time delay.  As the system exhibits internal feedback of the flowrate by the internal and external recycle flows, this may give rise to algebraic loops (also depending onhow flow rate controllers are set up). Consequently, the input flow rate to a system depends directly onits output flow rate at the same time instant and the numerical solver runs into problems.
There are several ways to break up an algebraic loop. For example, various Simulink blocks may be
used (e.g. the memory block, which delays an output signal with one time step), the flow equationsmay be solved analytically or a first-order reaction may be used for the flow rate in each reactormodule. However, the author recommends benchmark users implement a special hydraulic delay C-code S-function module and insert it in a suitable position in the ‘simulation benchmark’ , for example
just before the first biological reactor (i.e. block Hyd_delay in Figure 7.1). Naturally, every artificialdelay will have a slight impact on the dynamic behaviour of a system (in steady state there will be noeffect) but these effects can be made so small that they are, for all intents and purposes, essentially
undetectable. A first-order reaction (i.e. a low-pass filter) is used to avoid a direct feed-through of the
flow rate. The mathematical expression for such a first-order reaction is:
()QQ    and     TQQ
dtdQ
outin=−= (7.1)
where:Q represents the flow rate and T is the time constant.
The chosen value for the time constant is a compromise between required CPU time for the simulation
and the effect on the dynamic behaviour of the system. A smaller value of T leads to more CPU
intensive simulations but the smaller value decreases the dynamic effects. For the  ‘simulation
benchmark’ the recommended value for T is 0.0001 days (i.e. 8.64 seconds), which is a very short time
period in relation to the sample time of the input data to the  ‘simulation benchmark’ (equal to 900
seconds) and the process dynamics. In order to guarantee that the mass balances of the system are notaffected by the ‘delay’ in Q, the same type of first-order reaction should also be implemented for all the
state variables. However, the equation should not be based on the concentrations of the variouscomponents but rather on the mass of each component and then the concentrations should berecalculated using the ‘delayed’ flow rate. An example of the mathematical expression for such a first-order reaction is:
( )
QSS    and     TSQS
dtdSS
outSSininSS=−•
=,,(7.2)
where:SS represents readily biodegradable substrate, and T and Q are the same as in
Equation 7.1
Note that SS,in and SS,out are concentrations whereas the unit of SS is mass per unit time. An example of
how the above principle is fully implemented can be seen in the C-code example in Section 7.6.2.
7.3 SIMULATION ISSUES – MATLAB/SIMULINK
At the simulation stage the use of the Simulink environment is quite straightforward. However, there
are some aspects with regard to the choice of numerical solvers and performance that need to beaddressed. The  ‘simulation benchmark’ influent data files are 14 days long, but in total, 28 days of
dynamic simulation (following steady state) are required for each weather simulation. That is, the
specified dynamic simulation procedure indicates that following the achievement of steady state (usingactive controllers but constant input data), the system should be simulated dynamically for 14 days48using the dry weather  data file.  After saving the system in the state achieved after this 14 days, each of
the 14-day weather files (dry, rain & storm) is to be used, each time starting from that saved state.
7.3.1 Solving Routines
The first problem is to determine the steady state using the constant input data file (i.e. the stabilisation
values).  The steady state solvers available in MATLAB/Simulink often cannot find a steady state forthe benchmark system (depending on the type of control that is implemented there may not even exist a
true steady state).  Instead, it is recommended that the benchmark system be simulated for 100-200
days and that the final values of the state variables be accepted as the steady-state result.  Note that it isimportant that such a 200-day steady-state simulation be effective.
The type of system defined in the  ‘simulation benchmark’ is normally considered to be a stiff dynamic
system, i.e. the time constants for the different processes involved vary significantly.  Such systems arequite difficult to solve numerically unless special numerical solvers are used, which have beendeveloped especially to deal with these difficulties. Simulink provides the user with approximately 15
different solvers.  Some of these are specifically designed for solving continuous, stiff systems (i.e.
ode23s based on a modified Rosenbrock formula and ode15s based on Gear’s method).  It would
appear that such algorithms would be the most suitable for simulating the benchmark system. However,there is a problem. The implementation of the nitrate sensor as described in Section 7.4.2 (Figure 7.3)contains a delay and a sample-and-hold block. This means that although the rest of the  ‘simulation
benchmark’ is described as a traditional continuous system the nitrate sensor turns it into a hybrid
system, i.e. a combination of continuous and discrete systems.
The stiff solvers work very poorly for hybrid systems. A solution would be to use a more traditional
solver ( ode23 or ode45 based on an explicit Runge-Kutta formula) that does not experience such
problems. On the other hand, the Runge-Kutta solvers are not the best ones for stiff systems.  This isparticularly important when such a system approaches steady state and the solver cannot takeadvantage of the large integration time steps used by a stiff solver.  Because the Runge-Kutta solversare limited in this way, a 200-day simulation would require a huge amount of CPU time (see Table7.1). A much more effective way is to remove the noise source, the delay and the sample-and-holdblock from the description of the nitrate sensor (and in all other parts of the system where similarimplementations may be used in he future).  That is, for the steady state case, the sensor should be
considered ideal (i.e. have one benchmark-steady-state model and one benchmark-dynamic model).
This will have no effect on the steady-state results (the noise and delay only affect the dynamicbehaviour of the system).  Moreover, the steady-state results are only used to provide reasonable initialvalues for the  ‘simulation benchmark’ before starting the dynamic simulations. The results shown in
Table 7.1 demonstrate the need to use the proper numerical solver for the benchmark steady statesimulations. Obviously ode15s or ode23tb  should be chosen. For more information about the
various numerical solvers the reader is advised to consult the Simulink user manual.
Table 7.1: Required CPU time to simulate the non-hybrid benchmark model for 200 days using constant input data
and different numerical solvers (results from a 440 MHz Sun computer). Random function used to initialise state
variables and same numerical tolerances used for all solvers.
Numerical solver Required CPU time Normalised CPU time
ode23 (Runge-Kutta) 35 minutes > 100
ode45 (Runge-Kutta) 45 minutes > 100
ode113 (Adams) 50 minutes > 100
ode15s (Gear) 10 seconds 1ode23s (Rosenbrock) 5 minutes 30ode23t (trapezoidal) days > 100ode23tb (TR-BDF2) 13 seconds 1.3
Note that some numerical problems may occur when using the best solvers for finding the steady-state
solution. If the initial values are too close to the correct values or if simulations are run for a very long
time ( /c149 /c3/c24/c19/c19/c3 /c71/c68/c92/c86/c12/c3 /c87/c75/c72/c3 /c86/c82/c79/c89/c72/c85/c3/c80/c68/c92/c3/c73/c68/c76/c79/c3/c87/c82/c3/c80/c68/c78/c72/c3/c68 /c81/c92/c3/c83/c85/c82/c74/c85/c72/c86 /c86/c17/c3/c3 /c44/c87/c3/c76/c86/c3 /c81/c82/c87/c3/c78/c81/c82/c90/c81/c3/c68/c87/c3 /c87/c75/c76/c86/c3 /c87/c76/c80/c72/c3/c76/c73/c3 /c87/c75/c76 /c86/c3 /c76/c86/c3 /c85 /c72/c79/c68/c87/c72 /c71
to the numerical resolution of the computer or a software-related problem.49When using the dynamic weather data files the measurement noise and time delay for the nitrate sensor
model should be used and consequently the ode45 numerical solver is the best choice. Because of the
dynamics of the input data, the CPU time required for solving the system with the ode45 or ode15s
is not much different even if a hybrid system  is avoided. As the input data are changing at 15-minute
intervals, a stiff solver does not benefit from its capability to use larger time steps. Table 7.2 shows
some examples of the required CPU time for different solvers when simulating the hybrid system  for 14
days using the dry weather  input data file. The results shown in Table 7.2 demonstrate the need to use
the proper numerical solver for the dynamic ‘simulation benchmark’ . Obviously ode23 or ode45
should be used in this case.
Table 7.2: Required CPU time to simulate the hybrid benchmark model for 14 days using dry weather input data and
different numerical solvers (results from a 440 MHz Sun computer). All state variables are initialised identically and
numerical tolerances for the solvers are the same.
Numerical solver Required CPU time Normalised CPU time
ode23 (Runge-Kutta) 130 seconds 1
ode45 (Runge-Kutta) 175 seconds 1.35
ode113 (Adams) 400 seconds 3.1ode15s (Gear) Hours > 100ode23s (Rosenbrock) 90 minutes 42ode23t (trapezoidal) Hours > 100ode23tb (TR-BDF2) 28 minutes 13
When using numerical solvers to simulate dynamic systems it is a good idea to use low values for the
numerical tolerances at an early stage (to ensure that the results are correct) and then increase them to
promote faster computer performance. For the  ‘simulation benchmark’ it has been verified that setting
the relative tolerance to 10-4 and the absolute tolerance to 10-7 (compared to the default tolerances of
10-3 and auto, respectively) produces correct and reliable results for the Simulink implementation  (both
for the steady state and dynamic situations). Increasing the suggested tolerances by a factor of ten onlyleads to a reduced CPU time of 2% (for the dynamic two-week simulations), whereas a decrease in the
tolerances by a factor of ten leads to an increased  CPU time of 21% (without any noticeable
improvement in the results).  Consequently, the suggested tolerances appear to be a reasonablecompromise.
7.3.2 Debugging
For debugging purposes, Simulink uses a consistency-checking tool that validates certain assumptions
made by the numerical solvers.  This tool is especially useful for making sure that S-functions adhere to
the same rules as the Simulink built-in blocks.  However, once all models have been validated, usersshould make sure that consistency checking is turned off.  This is done in the Simulation Parameter
window (Figure 7.2 ) by selecting the tab ‘Diagnostics’ and deactivating the tool. Running the
‘simulation benchmark’ with active consistency checking will increase the required CPU time for the
two-week dynamic simulations by approximately 25%.
7.3.3 Data Processing
The results from a Simulink simulation can be saved either to the MATLAB workspace or to files.  The
choice does not have any significant impact, although saving to files increases the required CPU timesomewhat.  However, as the  ‘simulation benchmark’ evaluation tools are based only on the last week of
each dynamic input data file and the required sampling time of the results is 15 minutes, there is no
need to store results at each integration time step. If all state variables from all reactors (including the
settler) are saved during a two-week dynamic simulation this will produce approximately 100 Mb ofdata (depending on the selected tolerances and integration algorithm).  If such an amount of data issaved to the MATLAB workspace then there is a distinct possib ility that various MATLAB memory
errors will occur.  To avoid this, the results should be saved to files instead but the required CPU timewill increase by 25-50%.  Alternatively, it is better to use the ‘produce specified output only’ option inthe Simulink simulation parameter window and only store results from the last week of the dynamicsimulations using an explicit sample time of 15 minutes. If this is done then the amount of stored data50from one dynamic benchmark simulation will be about 1.5 Mb. An example of how this is set up is
shown in Figure 7.2.
Figure 7.2: Explicit results output times have been specified in the simulation parameter window. Results are saved
from day 7 to day 14 with a time interval of 1/96 day = 15 minutes.
Once a simulation is finished and all the relevant results (state variables, controller outputs etc.) have
been stored either in the MATLAB workspace or in data files it is a fairly simple task to write thenecessary m-files for the performance assessment according to the benchmark description. Other typesof m-files for plotting different results and setting up the benchmark system for a new simulation arealso practical to enhance the use of the  ‘simulation benchmark’ in MATLAB/Simulink. If the user
prefers to do the performance assessment in another software program (i.e. a spreadsheet program like
Excel) the stored MATLAB files are easily exported. It is also possible to have on-line links betweenMATLAB and Excel so that data are immediately stored in a spreadsheet for further analysis.
7.4 BASIC CONTROL STRATEGY – MATLAB/SIMULINK
7.4.1 Hydraulic Delay Implications
Due to the effect of the hydraulic delay block some consideration must also be given to all types of
flow rate variations that are used in the ‘simulation benchmark’ .  In particular, the basic ‘simulation
benchmark’  control strategy describes an on-line controller to modify the internal recycle flow rate ( Q
a)
from tank 5 back to tank 1 to maintain a specified nitrate concentration in the second biological reactor.Consequently, the value of Q
a may change from one time step to another. If all flow rates were
modified instantaneously this would not be a problem (although this would imply an algebraic loop).However, the delay in the flow rate (and all components in the state vector) prior to the first biological
reactor creates some minor problems. For example, if Q
a is increased by 100% in a step-wise manner
then the output flow rate from tank 5 immediately increases by this value.  However, the input flow rateto tank 5 only increases as a first-order reaction because of the hydraulic delay block, i.e. after 8.64seconds the input flow rate will have increased by 63% (the characteristics of the first-order reaction).As the volumes of all the tanks are considered constant, the flow rate from tank 5 to the settler must bereduced in order to maintain the relationship that the input and output flow rates to a reactor must beidentical at all times. Such an involuntary change in the settler input flow rate will have an immediateeffect on the effluent flow rate (as the volume of the settler is also constant) and produce unwantedspikes in the flow characteristics of the settler.  This, in turn, will affect the transportation of material
through the settler. The same type of reasoning is valid for all variations in flow in the ‘simulation
benchmark’  system as all flows are correlated and affected by the behaviour of the hydraulic delay
block.
To minimise the above effects and also to make the simulations somewhat more realistic, it is
suggested that users make use of the same type of first-order reaction as is shown in Equation 7.151whenever a flow rate is modified during a simulation (in reality a modification of a flow rate is not
instantaneous but changes as a continuous function). In the example above, this implies that the outputfrom the internal recycle flow rate controller should be delayed by a first-order reaction before it affectsthe rest of the process. The recommended time constant for this reaction is 86.4 seconds  (T
1 = 10·T).
Using this time constant essentially eliminates all sudden spikes in flow rate as the time constant for
any user-imposed flow rate modification is ten times larger than the time constant for the hydraulicdelay block, which is only used to improve the behaviour of the numerical solver. Naturally, no first-order reactions should be used for the  ‘simulation benchmark’ plant input flow rate or the plant effluent
flow rate but only for the controlled internal flow rate variations (including any future control of thewastage flow rate).
7.4.2 Nitrate Sensor
According to the description of the basic control strategy,  the signal from the available nitrate sensor is
not an ideal continuous signal.  Rather, the measurements are delayed by 10 minutes, the samplingperiod is ten minutes and the measurement noise is white, normally distributed, zero-mean with aconstant standard deviation of 0.1 mg N/l and a low-level detection limit of 0.1 mg N/l.  Figure 7.3
illustrates how the sensor might be easily implemented in Simulink using the available standard
building blocks.
Figure 7.3: Block diagram of the nitrate sensor model in Simulink.
Preferably, the output from all sub-models should be verified independently. Diagnosing and correctingerrors once all sub-models have been put together is a tiresome and difficult task.  Figure 7.4 shows the
effects of the delay and added noise on the nitrate measurement signal.  This figure confirms the correct
behaviour of the sub-model.
Figure 7.4: Verification of the behaviour of the nitrate sensor model.527.5 CONCLUSION
The MATLAB/Simulink environment provides an excellent platform for a wide variety of simulation
applications, including the ‘simulation benchmark’ .  Its flexibility and generality in combination with
its extensive world-wide use are strong arguments for the software.  In addition, MATLAB/Simulinkoffers a number of tools to help users develop new control strategies and validate them using the‘simulation benchmark’ .  However, there are some drawbacks especially with regard to performance
and users should be aware of these drawbacks.  Hence, the reasoning for recommending the use of Ccode to implement the complex models.  Nevertheless, once the difficulties are understood and havebeen overcome, it is a relatively straightforward task to implement the  ‘simulation benchmark’ and take
full advantage of all the other features of MATLAB/Simulink. Hopefully, the suggestions and
recommendations provided in this chapter will assist future users achieve fast, accurate and consistent
benchmark results.537.6 MATLAB/SIMULINK - CODE EXAMPLES
7.6.1 MATLAB/Simulink - Example 1
C-code example of the biological reactor model to be included as an S-function in the Simulink
environment.
/* ASM1 is a C-code S-function of the IAWQ AS Model No 1. */
#define S_FUNCTION_NAME asm1#include "simstruc.h"
#include <math.h>
#define XINIT   ssGetArg(S,0)  /* initial state variable values */
#define PAR     ssGetArg(S,1)  /* model parameter values */
#define V  ssGetArg(S,2)  /* reactor volume m3 */
#define SOSAT   ssGetArg(S,3)  /* saturation concentration for DO */
/* mdlInitializeSizes - initialize the sizes array */
static void mdlInitializeSizes(SimStruct *S)
{
    ssSetNumContStates(S,13);    /* number of continuous states */
    /* order of states: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/
    /* S_NO, S_NH, S_ND, X_ND, S_ALK */
    ssSetNumDiscStates(S,0);     /* number of discrete states */
    ssSetNumInputs(S,16);        /* number of inputs */
    /* order of inputs: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/    /* S_NO, S_NH, S_ND, X_ND, S_ALK, TSS, Q, kLa */
    ssSetNumOutputs(S,15);       /* number of outputs */
    /* order of outputs: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/
    /* S_NO, S_NH, S_ND, X_ND, S_ALK, TSS, Q */
    ssSetDirectFeedThrough(S,1); /* direct feedthrough flag */
    ssSetNumSampleTimes(S,1);    /* number of sample times  */
    ssSetNumSFcnParams(S,4);     /* number of input arguments */
    /* XINIT, PAR, V, SOSAT */
    ssSetNumRWork(S,0);          /* number of real work vector elements */    ssSetNumIWork(S,0);          /* number of integer work vector elements */
    ssSetNumPWork(S,0);          /* number of pointer work vector elements */
}
/* mdlInitializeSampleTimes - initialize the sample times array */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, CONTINUOUS_SAMPLE_TIME);
    ssSetOffsetTime(S, 0, 0.0);}
/* mdlInitializeConditions - initialize the states */
static void mdlInitializeConditions(double *x0, SimStruct *S)
{
int i;
for (i = 0; i < 13; i++) {
   x0[i] = mxGetPr(XINIT)[i];
}}
/* mdlOutputs - compute the outputs */
static void mdlOutputs(double *y, double *x, double *u, SimStruct *S, int tid)
{
  double X_I2TSS, X_S2TSS, X_BH2TSS, X_BA2TSS, X_P2TSS;
  int i;
  X_I2TSS = mxGetPr(PAR)[19];
  X_S2TSS = mxGetPr(PAR)[20];  X_BH2TSS = mxGetPr(PAR)[21];
  X_BA2TSS = mxGetPr(PAR)[22];
  X_P2TSS = mxGetPr(PAR)[23];
  for (i = 0; i < 13; i++) {
      y[i] = x[i];
  }
  y[13]=X_I2TSS*x[2]+X_S2TSS*x[3]+X_BH2TSS*x[4]+X_BA2TSS*x[5]+X_P2TSS*x[6];
  y[14]=u[14];
}
/* mdlUpdate - perform action at major integration time step */
static void mdlUpdate(double *x, double *u, SimStruct *S, int tid)
{
}54/* mdlDerivatives - compute the derivatives */
static void mdlDerivatives(double *dx, double *x, double *u, SimStruct *S, int tid)
{
double mu_H, K_S, K_OH, K_NO, b_H, mu_A, K_NH, K_OA, b_A, ny_g, k_a, k_h, K_X, ny_h;
double Y_H, Y_A, f_P, i_XB, i_XP;
double proc1, proc2, proc3, proc4, proc5, proc6, proc7, proc8;
double reac1, reac2, reac3, reac4, reac5, reac6, reac7, reac8, reac9, reac10, reac11,
reac12, reac13;double vol, SO_sat, T;
double xtemp[13];
int i;
mu_H = mxGetPr(PAR)[0];
K_S = mxGetPr(PAR)[1];
K_OH = mxGetPr(PAR)[2];
K_NO = mxGetPr(PAR)[3];
b_H = mxGetPr(PAR)[4];mu_A = mxGetPr(PAR)[5];
K_NH = mxGetPr(PAR)[6];
K_OA = mxGetPr(PAR)[7];
b_A = mxGetPr(PAR)[8];
ny_g = mxGetPr(PAR)[9];
k_a = mxGetPr(PAR)[10];
k_h = mxGetPr(PAR)[11];
K_X = mxGetPr(PAR)[12];
ny_h = mxGetPr(PAR)[13];Y_H = mxGetPr(PAR)[14];
Y_A = mxGetPr(PAR)[15];
f_P = mxGetPr(PAR)[16];
i_XB = mxGetPr(PAR)[17];
i_XP = mxGetPr(PAR)[18];
vol = mxGetPr(V)[0];
SO_sat = mxGetPr(SOSAT)[0];
for (i = 0; i < 13; i++) {
   if (x[i] < 0)
     xtemp[i] = 0;
   else
     xtemp[i] = x[i];
}
proc1 = mu_H*(xtemp[1]/(K_S+xtemp[1]))*(xtemp[7]/(K_OH+xtemp[7]))*xtemp[4];
proc2 = mu_H*(xtemp[1]/(K_S+xtemp[1]))*(K_OH/(K_OH+xtemp[7]))*
(xtemp[8]/(K_NO+xtemp[8]))*ny_g*xtemp[4];proc3 = mu_A*(xtemp[9]/(K_NH+xtemp[9]))*(xtemp[7]/(K_OA+xtemp[7]))*xtemp[5];
proc4 = b_H*xtemp[4];
proc5 = b_A*xtemp[5];
proc6 = k_a*xtemp[10]*xtemp[4];
proc7 =
k_h*((xtemp[3]/xtemp[4])/(K_X+(xtemp[3]/xtemp[4])))*((xtemp[7]/(K_OH+xtemp[7]))+ny_h*
(K_OH/(K_OH+xtemp[7]))*(xtemp[8]/(K_NO+xtemp[8])))*xtemp[4];
proc8 = proc7*xtemp[11]/xtemp[3];
reac1 = 0;
reac2 = (-proc1-proc2)/Y_H+proc7;
reac3 = 0;
reac4 = (1-f_P)*(proc4+proc5)-proc7;
reac5 = proc1+proc2-proc4;
reac6 = proc3-proc5;
reac7 = f_P*(proc4+proc5);
reac8 = -((1-Y_H)/Y_H)*proc1-((4.57-Y_A)/Y_A)*proc3;
reac9 = -((1-Y_H)/(2.86*Y_H))*proc2+proc3/Y_A;reac10 = -i_XB*(proc1+proc2)-(i_XB+(1/Y_A))*proc3+proc6;
reac11 = -proc6+proc8;
reac12 = (i_XB-f_P*i_XP)*(proc4+proc5)-proc8;
reac13 = -i_XB/14*proc1+((1-Y_H)/(14*2.86*Y_H)-(i_XB/14))*proc2-
((i_XB/14)+1/(7*Y_A))*proc3+proc6/14;
dx[0] = 1/vol*(u[14]*(u[0]-x[0]))+reac1;
dx[1] = 1/vol*(u[14]*(u[1]-x[1]))+reac2;
dx[2] = 1/vol*(u[14]*(u[2]-x[2]))+reac3;dx[3] = 1/vol*(u[14]*(u[3]-x[3]))+reac4;
dx[4] = 1/vol*(u[14]*(u[4]-x[4]))+reac5;
dx[5] = 1/vol*(u[14]*(u[5]-x[5]))+reac6;
dx[6] = 1/vol*(u[14]*(u[6]-x[6]))+reac7;
dx[7] = 1/vol*(u[14]*(u[7]-x[7]))+reac8+u[15]*(SO_sat-x[7]);
dx[8] = 1/vol*(u[14]*(u[8]-x[8]))+reac9;
dx[9] = 1/vol*(u[14]*(u[9]-x[9]))+reac10;
dx[10] = 1/vol*(u[14]*(u[10]-x[10]))+reac11;
dx[11] = 1/vol*(u[14]*(u[11]-x[11]))+reac12;dx[12] = 1/vol*(u[14]*(u[12]-x[12]))+reac13;
}
/* mdlTerminate - called when the simulation is terminated */
static void mdlTerminate(SimStruct *S)
{55}
#ifdef MATLAB_MEX_FILE     /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif
7.6.2 MATLAB/Simulink - Example 2
C-code example of a hydraulic delay module to be included as an S-function in the Simulink
environment to avoid problems with algebraic loops.
/* hyddelayv2 is a C-code S-function for a first-order reaction of flow and load */
#define S_FUNCTION_NAME hyddelayv2#include "simstruc.h"#define XINIT   ssGetArg(S,0)  /* initial state variable values */
#define PAR     ssGetArg(S,1)  /* model parameter value */
#define T       ssGetArg(S,2)  /* time constant for first-order reaction */
/* mdlInitializeSizes - initialize the sizes array */
static void mdlInitializeSizes(SimStruct *S)
{
    ssSetNumContStates(S,14);    /* number of continuous states */
    /* order of states: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/
    /* S_NO, S_NH, S_ND, X_ND, S_ALK, Q */    ssSetNumDiscStates(S,0);     /* number of discrete states */
    ssSetNumInputs(S,15);        /* number of inputs */
    /* order of inputs: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/
    /* S_NO, S_NH, S_ND, X_ND, S_ALK, TSS, Q */
    ssSetNumOutputs(S,15);       /* number of outputs */
    /* order of outputs: S_I, S_S, X_I, X_S, X_BH, X_BA, X_P, S_O,*/
    /* S_NO, S_NH, S_ND, X_ND, S_ALK, TSS, Q */
    ssSetDirectFeedThrough(S,0); /* direct feedthrough flag */
    ssSetNumSampleTimes(S,1);    /* number of sample times */    ssSetNumSFcnParams(S,3);     /* number of input arguments */
    /* XINIT, PAR, T */
    ssSetNumRWork(S,0);          /* number of real work vector elements */
    ssSetNumIWork(S,0);          /* number of integer work vector elements */
    ssSetNumPWork(S,0);          /* number of pointer work vector elements */
}
/* mdlInitializeSampleTimes - initialize the sample times array */
static void mdlInitializeSampleTimes(SimStruct *S){
    ssSetSampleTime(S, 0, CONTINUOUS_SAMPLE_TIME);
    ssSetOffsetTime(S, 0, 0.0);
}
/* mdlInitializeConditions - initialize the states */
static void mdlInitializeConditions(double *x0, SimStruct *S)
{
int i;for (i = 0; i < 14; i++) {
   x0[i] = mxGetPr(XINIT)[i];
}
}
/* mdlOutputs - compute the outputs */
static void mdlOutputs(double *y, double *x, double *u, SimStruct *S, int tid)
{
  double X_I2TSS, X_S2TSS, X_BH2TSS, X_BA2TSS, X_P2TSS;  int i;
  X_I2TSS = mxGetPr(PAR)[19];
  X_S2TSS = mxGetPr(PAR)[20];
  X_BH2TSS = mxGetPr(PAR)[21];
  X_BA2TSS = mxGetPr(PAR)[22];
  X_P2TSS = mxGetPr(PAR)[23];
  for (i = 0; i < 13; i++) {
      y[i] = x[i]/x[13];
  }  y[13]=(X_I2TSS*x[2]+X_S2TSS*x[3]+X_BH2TSS*x[4]+X_BA2TSS*x[5]+
  X_P2TSS*x[6])/x[13];
  y[14]=x[13];
}
/* mdlUpdate - perform action at major integration time step */
static void mdlUpdate(double *x, double *u, SimStruct *S, int tid)
{56}
/* mdlDerivatives - compute the derivatives */
static void mdlDerivatives(double *dx, double *x, double *u, SimStruct *S, int tid)
{
int i;
double timeconst;
timeconst = mxGetPr(T)[0];
if (timeconst > 0.0000001) {
  dx[0] = (u[0]*u[14]-x[0])/timeconst;
  dx[1] = (u[1]*u[14]-x[1])/timeconst;
  dx[2] = (u[2]*u[14]-x[2])/timeconst;
  dx[3] = (u[3]*u[14]-x[3])/timeconst;
  dx[4] = (u[4]*u[14]-x[4])/timeconst;
  dx[5] = (u[5]*u[14]-x[5])/timeconst;
  dx[6] = (u[6]*u[14]-x[6])/timeconst;
  dx[7] = (u[7]*u[14]-x[7])/timeconst;  dx[8] = (u[8]*u[14]-x[8])/timeconst;
  dx[9] = (u[9]*u[14]-x[9])/timeconst;
  dx[10] = (u[10]*u[14]-x[10])/timeconst;
  dx[11] = (u[11]*u[14]-x[11])/timeconst;
  dx[12] = (u[12]*u[14]-x[12])/timeconst;
  dx[13] = (u[14]-x[13])/timeconst; }
else {
  dx[0] = 0;
  dx[1] = 0;  dx[2] = 0;
  dx[3] = 0;
  dx[4] = 0;
  dx[5] = 0;
  dx[6] = 0;
  dx[7] = 0;
  dx[8] = 0;
  dx[9] = 0;
  dx[10] = 0;  dx[11] = 0;
  dx[12] = 0;
  dx[13] = 0;
  x[0] = u[0]*u[14];
  x[1] = u[1]*u[14];
  x[2] = u[2]*u[14];
  x[3] = u[3]*u[14];
  x[4] = u[4]*u[14];
  x[5] = u[5]*u[14];  x[6] = u[6]*u[14];
  x[7] = u[7]*u[14];
  x[8] = u[8]*u[14];
  x[9] = u[9]*u[14];
  x[10] = u[10]*u[14];
  x[11] = u[11]*u[14];
  x[12] = u[12]*u[14];
  x[13] = u[14];
}}
/* mdlTerminate - called when the simulation is terminated */
static void mdlTerminate(SimStruct *S)
{
}
#ifdef MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"     /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"      /* Code generation registration function */
#endif578 
STOAT™ described by Jeremy Dudley
NOTE: The issues and procedures outlined in this chapter are specific to the use of STOAT with the ‘simulation
benchmark’  and in no way should be interpreted as necessary procedures for using STOAT for any other purpose.
STOAT is a modular multipurpose modelling environment for the simulation of wastewater treatment
systems. STOAT includes an implementation of ASM1, called IAWQ #1, and the Takács settler model,
called Generic. Both of these models differ in several respects from the interpretation used by the
benchmark.  To make implementation of the ‘simulation benchmark’  easier, STOAT has been updated
at Version 4.1.6 to include benchmark-compatible implementations of these models. For both theaeration tank and the settling tank the models have been called COST 682 . The standard models will
not produce results that are comparable with the accepted ‘simulation benchmark’  results so users will
need to upgrade to Version 4.1.6 or later. Users should contact WRc for details.
8.1 MODEL ISSUES – STOAT
The default implementations of the ASM1 and Takács models in STOAT produce substantially
different predictions from the accepted benchmark results. For this reason, the COST 682  models were
developed.  These ‘new’ models are consistent with those described in the COST ‘simulation
benchmark’ . The differences between the standard STOAT models and the benchmark models are
described below.
8.1.1 Biological Process Model
The state variables used in the STOAT model are not exactly the same as those used in ASM1.  Table
8.1 shows the relationship between the STOAT and ASM1 variables. Note that STOAT does not usecryptic names for state variables, so there is no need to relate cryptic names.
The default biological process model in STOAT and the model specified in the ‘simulation benchmark’
are essentially identical, but one difference, related to particulate degradable nitrogen ( X
ND) in the
influent, has been identified. In the benchmark, the value of XND in the influent is treated as being
entirely available for degradation by the biomass. In the STOAT model, the value of XND available for
degradation is reduced by the amount of nitrogen assumed to be held within the biomass:
XND,available = XND,influent - iXB XB,H (8.1)
STOAT™ is a trademarked products of:
WRc plc. Frankland Road, Swindon SN5 8YF, United Kingdom
tel: +44-1793-865000fax: +44-1793-865001web: www.wrcplc.co.uk58Table 8.1: Comparison of state variables used in STOAT and ASM1.
STOAT ASM1 equivalent
Inert soluble COD SI
Degradable soluble COD SS
Inert particulate COD XI + XP
Degradable particulate COD XS
Heterotrophs XB,H
Autotrophs XB,A
Dissolved oxygen SO
Nitrate SNO
Ammonia SNH
Soluble degradable organic N SND
Particulate degradable organic N XND
Nonvolatile solids ignored
This difference led to STOAT having a lower (and significantly so: 1.35 versus 1.73 mg/l) prediction
of effluent ammonia.  The benchmark implementation for STOAT has, therefore, been modified.However, it should be made clear that this is an inconsistency in the ‘simulation benchmark’
description.  That is, it is somewhat inconsistent to define a nitrogen content for the biomass (i.e. i
XB) in
the reactor, but ignore that partitioning for the influent.  Nevertheless, to remain consistent with the
‘simulation benchmark’  description, the ‘new’ model was developed.
It should further be noted that STOAT works in time units of hours, while the benchmark is set up in
time units of days. This means that changes are required in the defined flow rates and calibration
parameters to compensate for the time unit. The STOAT default stoichiometric and kinetic parameterscorrespond to the ASM1 and benchmark defined values. These are always adjusted for temperature andare quoted at a reference temperature of 15
0C.
8.1.2 Settling Model
In contrast to the biological model, many differences were noted when the defined ‘simulation
benchmark’ settler was compared to the original STOAT settling tank implementation. These
differences are divided into two areas: the handling of nonsettleable solids, and the calculation of flux
behaviour.
The Takács model separates out a value of suspended solids that is nonsettleable based on the
instantaneous influent concentration, and calculates a settling velocity based on the total suspendedsolids concentration less the nonsettleable value; but the settling velocity is then applied to thenonsettleable fraction. In STOAT the nonsettleable fraction is assumed to have escaped the floc anddoes not have a settling velocity applied against it. In addition, the nonsettleable fraction is calculatedas being a state variable, fed by the influent.  Mathematically we have the following:
Settling velocity v(X) = max(0, min( v
max, v0 [) ( ) ( min minXXr XXr p h e e−− −−− ) (8.2)
In the benchmark: J = v(X) X
In STOAT: J = v(X) [ X - Xmin]
In the benchmark: Xmin =fnss • Xf
In STOAT: d Xmin/dt =Q (fnss • Xf - Xmin)]; and this equation is implemented in the
obvious way for each layer in the settler model.
The Takács model defines different settling flux models according to whether the location being looked
at is above the feed point, at the feed point, or below the feed point. The STOAT implementationsimplifies this and assumes that the settling process is independent of the feed point location, and onlyaffected by the local concentration.  Thus, in STOAT at every point the flux leaving a layer iscalculated as:
min(J
clar,i, Jclar,i-1) (8.3)59where:
Jclar,i = if Xi-1 < Xthreshold then Ji else min( Ji, Ji-1)
(and J is defined as above – remembering the STOAT and
benchmark differences)
In the benchmark above the feed layer the flux leaving or entering a layer is calculated using the
clarification flux, Jclar. At the feed layer, the flux entering is calculated using Jclar, but the flux leaving is
calculated as min( Ji, Ji-1) and for all stages below the feed stage the flux leaving is calculated as min( Ji,
Ji-1).  As with the biological model, these changes have been made for the STOAT benchmark model.
However, the original implementation will be left in STOAT.  The values used for the settlingparameters are specified using hours as the time basis, and are given in Table 8.2.
Table 8.2: Comparative settling parameters as defined in the ‘simulation benchmark’  and STOAT.
Parameter Benchmark STOAT
Value Units Value Units
Maximum settling velocity 250 m day-110.417 m hr-1
Vesilind settling velocity 474 m day-119.75 m hr-1
Hindered settling parameter 0.000576 m3 (g SS)-10.000576 m3 (g SS)-1
Flocculant settling parameter 0.00286 m3 (g SS)-10.00286 m3 (g SS)-1
Nonsettleable fraction 0.00228 dimensionless 0.00228 dimensionless
In STOAT, layer 1 is at the surface of the settler.  In the benchmark, layer 1 is at the base. The feed
point is specified as the depth from the surface . Locating the feed 1.6 m from the surface places it in
layer 6 from the base - layer 5 from the surface.
Figure 8.1: Settler layer numbering
8.2 CONFIGURATION ISSUES – STOAT
The ‘simulation benchmark’  can be set up in several ways, but the easiest way is shown in Figure 8.2.
This shows one influent, one aeration tank and one settler. The aeration tank is set up as 5 stages, whilethe settler is set up as 10 layers. The STOAT defaults are 1 stage for the aeration tank and 8 layers forthe settler. The number of internal mixed liquor recycles is set as a property of the aeration tank — thedefault is zero.  As discussed above, the COST 682 process models should also be chosen for both the
aeration tank and the settler.60
Figure 8.2: Interface layout of the COST ‘simulation benchmark’  plant in STOAT.
8.3 SIMULATION ISSUES – STOAT
The default integration algorithm in STOAT is RK-Cameron. The benchmark recommends using a
Gear solver and in STOAT, the recommended Gear solver is MEDBF.  STOAT has no steady state
solver, and the steady state solution must be achieved by running the system for 100 days, with the
input constant and a maximum integration time step of 24 hours.
8.3.1 Influent Data Files
In STOAT, the IAWQ #1  and COST 682  biological process models treat total COD as the sum of four
COD fractions: soluble biodegradable; soluble unbiodegradable; particulate biodegradable; andparticulate unbiodegradable.  Another variation users should be aware of involves the units used forinfluent heterotrophs and autotrophs.  If the influent heterotroph and/or autotroph concentrations arenon-zero then these are specified in suspended solids  units, not COD units. Conversion between the
two for the aeration model is made based on the user-defined value for the COD to biomass ratio.  This
has a default value of 0.5 in STOAT up to Version 4.0 and 1.48 (when using a COD model) fromVersion 4.1. The particulate biodegradable COD must include the biomass COD, as the biomass COD
will be subtracted from the influent COD when the influent enters the aeration tank.
The STOAT data file must contain the following data, comma separated, in the order listed. The
machine must be set up to interpret the period (.) as the decimal separator.  Table 8.3 shows the datafile structure and flow-weighted dry weather  data.  The benchmark data can be entered using the
STOAT influent data editor, in which case the values are limited to two decimal pl ace accuracy, or by
creating the data file in a spreadsheet and saving the results as a comma-separated file.61Table 8.3: Illustrative example of STOAT influent data file structure showing the flow-weighted dry weather  data and
the applicable units.
Influent Component Flow-weighted dry
weather influentUnits
Flow 768.58 m3 hr-1
Temperature 150C
pH 7COD of volatile fatty acids [0 for benchmark]Soluble degradable COD 69.50 g COD m
-3
Soluble nondegradable COD 30.00 g COD m-3
Particulate degradable COD 230.49 g COD m-3
Particulate nondegradable COD 51.20 g COD m-3
Volatile suspended solids 190.33 g SS m-3
Nonvolatile suspended solids 14.70 g SS m-3
Ammonia-N 31.56 g N m-3
Nitrate-N 0 g N m-3
Soluble organic N 6.95 g N m-3
Particulate organic N 10.59 g N m-3
Orthophosphate [0 for benchmark]Dissolved oxygen 0 g COD m
-3
PHB in viable PAOs [0 for benchmark]PHB in nonviable PAOs [0 for benchmark]Poly-P in viable PAOs [0 for benchmark]Poly-P in nonviable P users [0 for benchmark]Viable nitrifiers 0 g SS m
-3
Nonviable nitrifiers [0 for benchmark]Viable heterotrophs 19.03 g SS m
-3
Nonviable heterotrophs [0 for benchmark]23 0s for components not relevant to the benchmark
8.3.2 Aeration
The benchmark specifies a saturation dissolved oxygen concentration (DO) of 8 g m-3. In STOAT this
is achieved by selecting, for the aeration tank, Process Calibration  and making the calculation option
Specified by the user  rather than Calculated automatically.  The user-specified DO can be set to 8 g m-3.
8.4 BASIC CONTROL STRATEGY - STOAT
Implementing process control is fairly straightforward. The ‘simulation benchmark’  basic control
strategy makes use of two measured variables and two PI controllers. In STOAT, PI controllers for DO
control are provided as part of the aeration object (providing that DO measurements are modelled as
instantaneous with no measurement error, which fits the basic control strategy requirements).  Thecontrol settings for DO control can be changed using the Flow Distributions  menu. The edit dialogue is
shown in Figure 8.3.
The minimum and maximum K
La values can be set, as can the DO setpoint and the PI parameters for
gain and integral time. In STOAT, all PI controllers are implemented with integrator windupprotection.  That is, when the output reaches the minimum or maximum permitted values then theintegration of the error term is discontinued, as continued integration would fail to provide any change
in the output. This can provide more responsive control action at the extremes compared to PI schemes
with no windup control. The PI controllers within the aeration object are implemented as differentialequations, rather than difference equations, and are effectively equal to analogue, rather than digital,controllers.62
Figure 8.3: Flow distribution menu for DO control.
In contrast to the DO controller set-up, the nitrate controller requires the addition of a measuring point
and a PI controller.  The PI controller can be specified as analogue (integral term handled as adifferential equation) or as digital (integral term handled as a difference equation) and the controllermay be simple (shown in the following screen shots) or comprehensive.  Figure 8.4 shows how thelayout might look.  A modification was added to STOAT 4.1.6 to provide support for a noisyinstrument.
Figure 8.4: STOAT layout showing inclusion of a measuring point and PI controller.63
Figure 8.5: Nitrate PI controller signal set-up.
The nitrate PI controller is set-up using the PID controller dialogue box as shown in Figure 8.5.  This
figure illustrates the input parameters for identifying the location of the input signal and control output.In this case, the control is based on whatever the instrument sensor reads, and is used to manipulate theflow of MLSS recycle leaving stage 5 of the aeration tank.  The PID controller is then specified. P, PIand PID forms can be represented, and the controller gain, integral time, and minimum and maximumoutputs can be set.  Figure 8.6 shows the applicable dialogue boxes.
Figure 8.6: Nitrate PI controller settings.
The controller setpoint is set using the operation menu and the nitrate sensor connection is set-up as
shown in Figure 8.7.  In this instance, nitrate concentrations are taken from the sensor. There are
several sensor models, and the required model for the basic control strategy is ‘wet chemistry’. Thelocation of the input signal is set up in a similar manner to that of the PI controller, as can be seen inFigure 8.7.  Aspects of the sensor model can then specified including the sampling time, the samplingdelay and the noise model (none, uniform or Normal).  When using the ‘Normal’ model, the mean (fora biased sensor this is non-zero) and the standard deviation must be specified.  To avoid the theoreticalpossibility of the infinite tails on a Normal distribution, minimum and maximum values are specifiedon the noise.64
Figure 8.7: Nitrate PI controller sensor signal location.
8.5 CONCLUSION
Tuning STOAT to the ‘simulation benchmark’  specifications requires that the user be aware of several
STOAT-specific items.  First, users must make use of the customised COST 682 models for the
aeration tank and final settler. And second, users must alter the defined ‘simulation benchmark’
influent data files to allow for the inclusion of the biomass COD in the particulate biodegradable COD.With this knowledge it is then straightforward to implement the ‘simulation benchmark’  in STOAT and
achieve benchmark consistent results.
8.6 ACKNOWLEDGEMENTS
The information contained in this chapter was compiled from various sources including personal
experience with the software and the STOAT manuals. Cristiano Bastianutti and Paolo Cirello
provided additional help with the modelling.659 
References
Alex J., Beteau J.F., Copp J.B., Hellinga C., Jeppsson U., Marsili-Libelli S., Pons M.N., Spanjers H. and Vanhooren H. (1999)
Benchmark for evaluating control strategies in wastewater treatment plants.  Proceedings of the European Control
Conference, ECC ’99 , Karlsruhe, Germany, August 31-September 3, 1999.
Copp J. B. (2000) Defining a simulation benchmark for control strategies. Water 21 (April), 44-49.
Copp J. B. (1999) Development of standardised influent files for the evaluation of activated sludge control strategies. IAWQ
Scientific and Technical Report Task Group: Respirometry in Control of the Activated Sludge Process – internal report .
COST 682/624 Action website (http://www.ensic.u-nancy.fr/COSTWWTP) - The European Co-operation in the field of
Scientific and Technical Research .
Henze M., Grady Jr C.P.L., Gujer W., Marais G.v.R. and Matsuo T. (1986) Activated sludge model No.1, IAWQ Scientific and
Technical Report No.1 , IAWQ, London.
Pons M. N., Spanjers H. and Jeppsson U. (1999) Towards a benchmark for evaluating control strategies in wastewater treatment
plants by simulation.  Proceedings of 9th European Symposium on Computer Aided Process Engineering , Budapest,
Hungary, May 31-June 2, 1999.
Spanjers H., Vanrolleghem P., Nguyen K. Vanhooren H. and Patry G.G. (1998) Towards a benchmark for evaluating control
strategies in wastewater treatment plants by simulation. Wat. Sci. Technol. , 37(12), 219-226.
Spanjers H., Vanrolleghem P., Olsson G. and Dold P.L. (1998) Respirometry in Control of the Activated Sludge Process:
Principles, IAWQ Scientific and Technical Report No.7 , IAWQ, London.
Takács I., Patry G.G. and Nolasco D. (1991) A dynamic model of the clarification thickening process. Wat. Res. , 25, 10, 1263-
1271.
Vanhooren H. and Nguyen K. (1996) Development of a simulation protocol for evaluation of respirometry-based control
strategies, Technical Report, University of Gent, Gent, Belgium.6610 
Appendices
10.1 STEADY STATE RESULTS
Table 10.1: Steady state results generated by various simulation software packages.
PLATFORM BioWin FORTRAN GPS-X MATLAB/ SIMBA STOAT WEST Average
Simulink
Anoxic tank #1
Si 30 30 30 30 30 30 30 30
Ss 2.810 2.690 2.808 2.808 2.808 2.800 2.808 2.807
Xi 1149.110 1180.000 1149.200 1149.125 1149.120 1598.100 1149.125 1149.136Xs 82.150 81.600 82.135 82.135 82.135 82.100 82.135 82.132Xbh 2552.110 2590.000 2551.800 2551.766 2551.760 2551.900 2551.766 2551.850
Xba 148.340 153.000 148.390 148.389 148.389 148.400 148.389 148.383
Xp 448.980 469.000 448.860 448.852 448.850
(Xi = Xi + Xp) 448.852 448.879
So 0.000 0.000 0.004 0.004 0.004 -0.100 0.004 -0.014Sno 5.400 6.490 5.370 5.370 5.370 5.400 5.370 5.380
Snh 7.920 7.550 7.918 7.918 7.918 7.900 7.918 7.915
Snd 1.220 1.220 1.217 1.217 1.217 1.200 1.217 1.214Xnd 5.350 5.260 5.285 5.285 5.285 5.300 5.285 5.298
Salk 4.930 4.820 4.928 4.928 4.928
TSS 3289.830 3355.200 3285.200 3285.200 3285.200 3283.697 3285.200 3285.721
Anoxic tank #2
Si 30 30 30 30 30 30 30 30
Ss 1.460 1.410 1.459 1.459 1.459 1.500 1.459 1.466Xi 1149.110 1180.000 1149.200 1149.125 1149.120 1598.800 1149.125 1149.136
Xs 76.390 75.600 76.386 76.386 76.386 76.300 76.389 76.373
Xbh 2553.730 2590.000 2553.400 2553.385 2553.380 2553.500 2553.385 2553.463Xba 148.260 153.000 148.310 148.309 148.309 148.300 148.309 148.300Xp 449.660 470.000 449.530 449.523 449.521
(Xi = Xi + Xp) 449.523 449.551
So 0.000 0.003 0.000 0.000 0.000 0.000 0.000 0.000
Sno 3.690 4.760 3.662 3.662 3.662 3.700 3.662 3.673Snh 8.350 7.980 8.344 8.344 8.344 8.300 8.344 8.338
Snd 0.880 0.885 0.882 0.882 0.882 0.900 0.882 0.885
Xnd 5.100 4.990 5.029 5.029 5.029 5.000 5.029 5.036Salk 5.080 4.980 5.080 5.080 5.080TSS 3287.440 3351.400 3282.500 3282.546 3282.540 3281.265 3282.548 3283.14067Table 10.1 (cont’d): Steady state results generated by various simulation software packages.
PLATFORM BioWin FORTRAN GPS-X MATLAB/ SIMBA STOAT WEST Average
Simulink
Aerobic tank #1
Si 30 30 30 30 30 30 30 30
Ss 1.150 1.120 1.150 1.150 1.150 1.100 1.150 1.141Xi 1149.110 1180.000 1149.200 1149.125 1149.120 1599.700 1149.125 1149.136Xs 64.870 64.300 64.855 64.855 64.855 64.800 64.855 64.848
Xbh 2557.470 2600.000 2557.100 2557.131 2557.130 2557.300 2557.131 2557.210
Xba 148.890 154.000 148.940 148.941 148.941 149.000 148.941 148.942Xp 450.550 470.000 450.430 450.418 450.416
(Xi = Xi + Xp) 450.418 450.447
So 1.710 1.680 1.718 1.718 1.718 1.700 1.718 1.714
Sno 6.560 7.680 6.541 6.541 6.541 6.600 6.541 6.554Snh 5.560 5.150 5.548 5.548 5.548 5.500 5.548 5.542Snd 0.830 0.822 0.829 0.829 0.829 0.800 0.829 0.824
Xnd 4.460 4.370 4.392 4.392 4.392 4.400 4.392 4.405
Salk 4.670 4.560 4.675 4.675 4.673TSS 3283.210 3351.200 3277.800 3277.853 3277.850 3277.143 3277.853 3278.618
Aerobic tank #2
Si 30 30 30 30 30 30 30 30Ss 1.000 0.973 0.995 0.995 0.995 1.000 0.995 0.997
Xi 1149.110 1180.000 1149.200 1149.125 1149.120 1600.600 1149.125 1149.136
Xs 55.720 55.400 55.694 55.694 55.694 55.700 55.694 55.699Xbh 2559.520 2600.000 2559.200 2559.186 2559.180 2559.300 2559.183 2559.262Xba 149.480 154.000 149.530 149.527 149.527 149.500 149.527 149.515
Xp 451.450 471.000 451.320 451.315 451.313
(Xi = Xi + Xp) 451.315 451.342
So 2.420 2.440 2.429 2.429 2.429 2.400 2.429 2.423Sno 9.310 10.400 9.299 9.299 9.299 9.300 9.299 9.301
Snh 2.980 2.590 2.967 2.967 2.967 3.000 2.967 2.975
Snd 0.770 0.758 0.767 0.767 0.767 0.800 0.767 0.773Xnd 3.950 3.860 3.879 3.879 3.879 3.900 3.879 3.894Salk 4.290 4.190 4.294 4.293 4.292
TSS 3279.410 3345.300 3273.600 3273.633 3273.630 3273.292 3273.633 3274.533
Aerobic tank #3Si 30 30 30 30 30 30 30 30
Ss 0.890 0.871 0.889 0.889 0.889 0.900 0.889 0.891
Xi 1149.110 1180.000 1149.200 1149.125 1149.120 1601.500 1149.125 1149.136Xs 49.330 49.100 49.306 49.306 49.306 49.300 49.306 49.309Xbh 2559.690 2600.000 2559.400 2559.344 2559.340 2559.500 2559.344 2559.436
Xba 149.750 155.000 149.800 149.797 149.797 149.800 149.797 149.790
Xp 452.340 472.000 452.220 452.211 452.209
(Xi = Xi + Xp) 452.211 452.238
So 0.500 0.529 0.491 0.491 0.491 0.500 0.491 0.494
Sno 10.450 11.500 10.415 10.415 10.415 10.400 10.415 10.418
Snh 1.740 1.390 1.733 1.733 1.733 1.700 1.733 1.729Snd 0.690 0.681 0.688 0.688 0.688 0.700 0.688 0.691Xnd 3.600 3.520 3.527 3.527 3.527 3.500 3.527 3.535
Salk 4.120 4.020 4.126 4.126 4.124
TSS 3276.000 3342.100 3269.800 3269.837 3269.830 3269.914 3269.837 3270.870
Effluent
Si 30 30 30 30 30 30 30 30
Ss 0.890 0.871 0.889 0.889 0.889 0.900 0.889 0.891Xi 4.270 3.050 4.390 4.392 4.392 6.100 4.392 4.367
Xs 0.210 0.130 0.188 0.188 0.188 0.140 0.188 0.184
Xbh 9.510 6.710 9.776 9.782 9.782 6.600 9.782 9.726Xba 0.560 0.400 0.572 0.573 0.573 0.400 0.573 0.570Xp 1.680 1.220 1.727 1.728 1.728
(Xi = Xi + Xp) 1.728 1.718
So 0.500 0.530 0.491 0.491 0.491 0.500 0.491 0.494
Sno 10.450 11.500 10.415 10.415 10.415 10.400 10.415 10.418Snh 1.740 1.390 1.733 1.733 1.733 1.700 1.733 1.729
Snd 0.690 0.681 0.688 0.688 0.688 0.700 0.688 0.691
Xnd 0.010 0.009 0.013 0.013 0.013 0.000 0.013 0.011Salk 4.120 4.020 4.126 4.126 4.124TSS 12.170 8.630 12.497 12.497 12.497 12.500 12.497 12.443
Settler interior (TSS) mg/l
Layer 10 12.17 8.63 12.50 12.50 12.50 12.50 12.50 12.44
Layer 9 n/a 14.60 18.11 18.11 18.11 18.10 18.11 18.11
Layer 8 n/a 26.30 29.54 29.54 29.54 29.50 29.54 29.53Layer 7 n/a 66.50 68.98 68.98 68.98 68.90 68.98 68.96Layer 6 n/a 360.00 356.07 356.07 356.07 356.10 356.07 356.08
Layer 5 n/a 360.00 356.07 356.07 356.07 356.10 356.07 356.08
Layer 4 n/a 360.00 356.07 356.07 356.07 356.10 356.07 356.08Layer 3 n/a 360.00 356.07 356.07 356.07 356.10 356.07 356.08
Layer 2 n/a 825.00 356.07 356.07 356.07 356.10 356.07 356.08
Layer 1 6406.03 6540.00 6393.90 6393.98 6393.98 6394.10 6393.98 6396.006810.2 DYNAMIC RESULTS
Table 10.2 : Dynamic (openloop – i.e. without control) results generated with the dry weather  file by various simulation
software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 18061.33 18061.00 18061.33 18062.10 18078.75 18064.90 17.75
S_I = g COD/m3 30.0000 30.0000 30.0000 30.0000 30.0000 30.0000 0.0000
S_S = g COD/m3 0.9694 0.9730 0.9736 0.9735 0.9738 0.9727 0.0044
X_I = g COD/m3 4.5878 4.5800 4.5779 4.5795 4.5865 4.5823 0.0099X_S = g COD/m3 0.2250 0.2290 0.2229 0.2229 0.2229 0.2245 0.0061X_BH = g COD/m3 10.2219 10.2000 10.2206 10.2209 10.2225 10.2172 0.0225
X_BA = g COD/m3 0.5412 0.5420 0.5420 0.5422 0.5421 0.5419 0.0009
X_P = g COD/m3 1.7580 1.7600 1.7560 1.7572 1.7570 1.7576 0.0040S_O = g (-COD)/m3 0.7978 n/a 0.7463 0.7463 0.7462 0.7592 0.0516
S_NO = g N/m3 8.8464 8.8000 8.8231 8.8237 8.8182 8.8223 0.0464
S_NH = g N/m3 4.8571 4.8000 4.7632 4.7590 4.7746 4.7908 0.0981S_ND = g N/m3 0.7260 0.7310 0.7291 0.7290 0.7292 0.7289 0.0050X_ND = g N/m3 0.0158 0.0157 0.0157 0.0157 0.0157 0.0157 0.0001
S_ALK = kmol HCO3/m3 n/a 4.4600 4.4565 4.4562 n/a 4.4576 0.0038
TSS = g SS/m3 13.0004 12.9780 12.9895 12.9919 12.9982 12.9916 0.0224N_TKN = g N/m3 6.8407 6.7900 6.7490 6.7450 6.7613 6.7772 0.0957
N_tot = g N/m3 15.6871 15.6000 15.5721 15.5687 15.5796 15.6015 0.1184
COD_tot = g COD/m3 48.3033 46.5000 48.2930 48.2961 48.3048 47.9394 1.8048BOD5_tot = g/m3 2.7741 2.7800 2.7745 2.7746 2.7750 2.7757 0.0059
Effluent average loads
S_I = kg COD/d 541.8400 542.0000 541.8400 541.8620 542.3625 541.9809 0.5226
S_S  = kg COD/d 17.5094 17.6000 17.5848 17.5837 17.6057 17.5767 0.0963X_I = kg COD/d 82.8610 82.7000 82.6833 82.7153 82.9177 82.7755 0.2344X_S = kg COD/d 4.0641 4.0300 4.0255 4.0253 4.0290 4.0348 0.0388
X_BH = kg COD/d 184.6214 185.0000 184.5980 184.6110 184.8094 184.7280 0.4020
X_BA = kg COD/d 9.7752 9.7900 9.7891 9.7928 9.8014 9.7897 0.0261X_P = kg COD/d 31.7515 31.7000 31.7151 31.7379 31.7642 31.7337 0.0642S_O = kg (-COD)/d 14.4093 n/a 13.4791 13.4803 13.4901 13.7147 0.9302
S_NO = kg N/d 159.7777 159.0000 159.3566 159.3740 159.4225 159.3862 0.7777
S_NH = kg N/d 87.7261 86.6000 86.0291 85.9579 86.3197 86.5266 1.7682S_ND = kg N/d 13.1116 13.2000 13.1682 13.1673 13.1834 13.1661 0.0884
X_ND = kg N/d 0.2859 0.2840 0.2834 0.2834 0.2837 0.2841 0.0025
S_ALK = kmol HCO3/d n/a 80.5000 80.4910 80.4882 n/a 80.4931 0.0118TSS = kg N/d 234.8047 234.9200 234.6081 234.6610 234.9912 234.7970 0.3831N_TKN = kg N/d 123.5521 122.6300 121.8956 121.8280 122.2366 122.4285 1.7241
N_tot = kg N/d 283.3298 281.7500 281.2522 281.2020 281.6592 281.8386 2.1278
COD_tot = kg COD/d 872.4226 840.0000 872.2357 872.3270 873.2898 866.0550 33.2898BOD5_tot = kg/d 50.1046 50.2100 50.1116 50.1150 50.1691 50.1421 0.1054
Performance Indices
I.Q.-index = kg poll.units/d 42042.81 42000.00 42042.81 42042.81 42042.82 42034.25 42.82
E.Q.-index = kg poll.units/d 7108.84 7040.00 7066.72 7065.17 7066.68 7069.48 68.84
P_sludge = kg SS 17071.10 17052.00 17051.79 17050.58 17056.26 17056.35 20.52
P_sludge per day = kg SS/d 2438.70 2436.00 2435.97 2435.80 2436.61 2436.62 2.90P_sludge_eff = kg SS 1643.60 1631.00 1642.26 1642.63 1644.94 1640.89 13.94
P_sludge_eff per day = kg SS/d 234.80 233.00 234.61 234.66 234.99 234.41 1.99
P_total_sludge = kg SS 18714.80 18683.00 18694.05 18693.21 18701.20 18697.25 31.80P_total_sludge per day = kg SS/d 2673.50 2669.00 2670.58 2670.46 2671.60 2671.03 4.50
Aeration energy = kWh/d 6476.00 6476.00 6476.11 6476.11 6476.11 6476.07 0.11
Pumping energy = kWh/d 2967.00 2967.00 2966.76 2966.76 2966.76 2966.86 0.24
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.06 0.58 0.57 0.57 0.58 0.47 0.52i.e.: % of the time 0.89 8.23 8.18 8.18 8.25 6.75 7.36
The limit was violated at: occasions 1 5 5 5 5 4.20 4
The max effluent S_NH level
(4 g N/m3)
was violated during: d 4.03 4.40 4.38 4.38 4.35 4.31 0.37i.e.: % of the time 57.60 62.90 62.50 62.50 62.21 61.54 5.30The limit was violated at: occasions 5 7 7 7 7 6.60 269Table 10.3 : Dynamic (openloop – i.e. without control) results generated with the rain weather file by various
simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 23808.18 23810.00 23808.18 23808.60 23830.01 23812.99 21.83
S_I = g COD/m3 22.8329 22.8000 22.8388 22.8388 22.8460 22.8313 0.0460
S_S = g COD/m3 1.1367 1.1300 1.1345 1.1343 1.1345 1.1340 0.0067X_I = g COD/m3 5.6458 5.6500 5.6372 5.6389 5.6460 5.6436 0.0128X_S = g COD/m3 0.3493 0.3460 0.3448 0.3447 0.3448 0.3459 0.0046
X_BH = g COD/m3 12.8500 12.9000 12.8567 12.8565 12.8568 12.8640 0.0500
X_BA = g COD/m3 0.6409 0.6430 0.6426 0.6428 0.6427 0.6424 0.0021X_P = g COD/m3 2.0681 2.0700 2.0666 2.0680 2.0675 2.0680 0.0034
S_O = g (-COD)/m3 0.8860 n/a 0.8472 0.8470 0.8468 0.8567 0.0392
S_NO = g N/m3 6.9683 6.9300 6.9585 6.9596 6.9581 6.9549 0.0383S_NH = g N/m3 5.1016 5.0100 4.9862 4.9820 4.9935 5.0147 0.1196S_ND = g N/m3 0.8151 0.8180 0.8157 0.8156 0.8157 0.8160 0.0029
X_ND = g N/m3 0.0239 0.0237 0.0236 0.0236 0.0236 0.0237 0.0003
S_ALK = kmol HCO3/m3 n/a 5.1500 5.1435 5.1431 n/a 5.1455 0.0069TSS = g SS/m3 16.1656 16.2100 16.1610 16.1633 16.1683 16.1736 0.0490N_TKN = g N/m3 7.4827 7.4000 7.3677 7.3636 7.3756 7.3979 0.1191
N_tot = g N/m3 14.4510 14.3000 14.3262 14.3231 14.3337 14.3468 0.1510
COD_tot = g COD/m3 45.5236 43.4000 45.5213 45.5242 45.5382 45.1015 2.1382BOD5_tot = g/m3 3.4744 3.4800 3.4747 3.4746 3.4747 3.4757 0.0056
Effluent average loads
S_I = kg COD/d 543.6091 544.0000 543.7504 543.7600 544.4198 543.9079 0.8108
S_S  = kg COD/d 27.0626 27.0000 27.0100 27.0066 27.0350 27.0228 0.0626X_I = kg COD/d 134.4152 135.0000 134.2121 134.2550 134.5443 134.4853 0.7879
X_S = kg COD/d 8.3166 8.2400 8.2094 8.2079 8.2163 8.2380 0.1087
X_BH = kg COD/d 305.9359 307.0000 306.0952 306.0950 306.3766 306.3006 1.0641X_BA = kg COD/d 15.2575 15.3000 15.2998 15.3051 15.3149 15.2955 0.0574X_P = kg COD/d 49.2380 49.3000 49.2025 49.2359 49.2685 49.2490 0.0975
S_O = kg (-COD)/d 21.0932 n/a 20.1699 20.1668 20.1784 20.4021 0.9264
S_NO = kg N/d 165.9032 165.0000 165.6694 165.6970 165.8120 165.6163 0.9032S_NH = kg N/d 121.4604 120.0000 118.7122 118.6150 118.9960 119.5567 2.8454
S_ND = kg N/d 19.4049 19.5000 19.4204 19.4181 19.4383 19.4363 0.0951
X_ND = kg N/d 0.5686 0.5640 0.5618 0.5618 0.5624 0.5637 0.0069S_ALK = kmol HCO3/d n/a 123.0000 122.4574 122.4510 n/a 122.6361 0.5490TSS = kg N/d 384.8726 386.1300 384.7643 384.8240 385.2905 385.1763 1.3657
N_TKN = kg N/d 178.1486 176.2000 175.4109 175.3160 175.7607 176.1673 2.8326
N_tot = kg N/d 344.0518 340.4800 341.0803 341.0130 341.5727 341.6396 3.5718COD_tot = kg COD/d 1083.8349 1033.3000 1083.7794 1083.8700 1085.1755 1073.9920 51.8755
BOD5_tot = kg/d 82.7193 82.8600 82.7257 82.7257 82.8019 82.7665 0.1407
Performance Indices
I.Q.-index = kg poll.units/d 42042.81 42000.00 42042.81 42042.81 42042.82 42034.2501 42.8157
E.Q.-index = kg poll.units/d 8900.06 8800.00 8840.37 8838.60 8843.96 8844.5975 100.0600
P_sludge = kg SS 16492.60 16457.00 16469.13 16467.86 16536.97 16484.7113 79.9685
P_sludge per day = kg SS/d 2356.10 2351.00 2352.73 2352.55 2362.42 2354.9613 11.4241
P_sludge_eff = kg SS 2694.10 2688.00 2693.35 2693.77 2697.03 2693.2506 9.0332
P_sludge_eff per day = kg SS/d 384.90 384.00 384.76 384.82 385.29 384.7550 1.2905P_total_sludge = kg SS 19186.70 19145.00 19162.48 19161.63 19234.00 19177.9619 89.0017P_total_sludge per day = kg SS/d 2741.00 2735.00 2737.50 2737.38 2747.71 2739.7183 12.7145
Aeration energy = kWh/d 6476.00 6476.00 6476.11 6476.11 6476.11 6476.0668 0.1120
Pumping energy = kWh/d 2967.00 2967.00 2966.76 2966.76 2966.76 2966.8560 0.2400
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.00 0.31 0.31 0.30 0.32 0.2487 0.3150
i.e.: % of the time 0.00 4.49 4.46 4.32 4.50 3.5549 4.5000
The limit was violated at: occasions 0 3 3 3 3 2.4000 3
The max effluent S_NH level
(4 g N/m3)was violated during: d 4.38 4.46 4.44 4.43 4.45 4.4317 0.0780i.e.: % of the time 62.60 63.80 63.39 63.24 63.60 63.3266 1.2000
The limit was violated at: occasions 7 7 7 7 7 7.0000 070Table 10.4 : Dynamic (openloop – i.e. without control) results generated with the storm weather file by various
simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 20658.10 20658.00 20658.10 20658.20 20677.34 20661.95 19.34
S_I = g COD/m3 26.2778 26.3000 26.2999 26.3000 26.3015 26.2958 0.0237
S_S = g COD/m3 1.1054 1.1100 1.1131 1.1129 1.1130 1.1109 0.0077X_I = g COD/m3 5.6398 5.6400 5.6355 5.6370 5.6430 5.6390 0.0075X_S = g COD/m3 0.3266 0.3240 0.3227 0.3226 0.3224 0.3236 0.0042
X_BH = g COD/m3 11.8591 11.9000 11.8802 11.8801 11.8712 11.8781 0.0409
X_BA = g COD/m3 0.5860 0.5890 0.5883 0.5884 0.5879 0.5879 0.0030X_P = g COD/m3 1.9113 1.9200 1.9125 1.9137 1.9119 1.9139 0.0087
S_O = g (-COD)/m3 0.7990 n/a 0.7635 0.7634 0.7632 0.7723 0.0358
S_NO = g N/m3 7.5002 7.4500 7.4800 7.4809 7.4791 7.4780 0.0502S_NH = g N/m3 5.4755 5.3900 5.3539 5.3495 5.3610 5.3860 0.1260S_ND = g N/m3 0.7981 0.8060 0.8035 0.8034 0.8036 0.8029 0.0079
X_ND = g N/m3 0.0229 0.0227 0.0226 0.0226 0.0226 0.0227 0.0003
S_ALK = kmol HCO3/m3 n/a 4.8800 4.8726 4.8722 n/a 4.8749 0.0078TSS = g SS/m3 15.2421 15.2800 15.2543 15.2563 15.2522 15.2570 0.0379N_TKN = g N/m3 7.7452 7.6690 7.6305 7.6261 7.6373 7.6616 0.1191
N_tot = g N/m3 15.2454 15.1200 15.1105 15.1070 15.1164 15.1399 0.1384
COD_tot = g COD/m3 47.7060 45.8400 47.7520 47.7546 47.7507 47.3607 1.9146BOD5_tot = g/m3 3.2204 3.2300 3.2267 3.2266 3.2244 3.2256 0.0096
Effluent average loads
S_I = kg COD/d 542.8501 543.0000 543.3052 543.3110 543.8448 543.2622 0.9947
S_S  = kg COD/d 22.8351 23.0000 22.9939 22.9914 23.0141 22.9669 0.1790X_I = kg COD/d 116.5072 117.0000 116.4188 116.4500 116.6821 116.6116 0.5812
X_S = kg COD/d 6.7463 6.6900 6.6654 6.6643 6.6660 6.6864 0.0820
X_BH = kg COD/d 244.9865 246.0000 245.4223 245.4210 245.4639 245.4587 1.0135X_BA = kg COD/d 12.1054 12.2000 12.1522 12.1561 12.1555 12.1539 0.0946X_P = kg COD/d 39.4846 39.6000 39.5078 39.5333 39.5320 39.5315 0.1154
S_O = kg (-COD)/d 16.5062 n/a 15.7727 15.7713 15.7818 15.9580 0.7349
S_NO = kg N/d 154.9403 154.0000 154.5230 154.5420 154.6487 154.5308 0.9403S_NH = kg N/d 113.1139 111.0000 110.6024 110.5120 110.8515 111.2160 2.6019
S_ND = kg N/d 16.4868 16.7000 16.5990 16.5972 16.6160 16.5998 0.2132
X_ND = kg N/d 0.4736 0.4690 0.4679 0.4678 0.4681 0.4693 0.0058S_ALK = kmol HCO3/d n/a 101.0000 100.6591 100.6520 n/a 100.7704 0.3480TSS = kg N/d 314.8730 316.1200 315.1249 315.1680 315.3747 315.3321 1.2470
N_TKN = kg N/d 160.0012 158.4300 157.6308 157.5420 157.9181 158.3044 2.4592
N_tot = kg N/d 314.9415 312.3500 312.1538 312.0840 312.5668 312.8192 2.8575COD_tot = kg COD/d 985.5151 946.9600 986.4656 986.5260 987.3584 978.5650 40.3984
BOD5_tot = kg/d 66.5265 66.7300 66.6570 66.6566 66.6725 66.6485 0.2035
Performance Indices
I.Q.-index = kg poll.units/d 43758.11 43800.00 43758.11 43758.11 43758.12 43766.4902 41.8900
E.Q.-index = kg poll.units/d 8047.14 7960.00 7993.11 7991.19 7994.79 7997.2443 87.1400
P_sludge = kg SS 18223.60 18200.00 18197.38 18196.14 18188.33 18201.0895 35.2732
P_sludge per day = kg SS/d 2603.40 2600.00 2599.63 2599.45 2598.33 2600.1616 5.0676
P_sludge_eff = kg SS 2204.10 2191.00 2205.87 2206.18 2207.62 2202.9553 16.6226
P_sludge_eff per day = kg SS/d 314.90 313.00 315.12 315.17 315.37 314.7139 2.3747P_total_sludge = kg SS 20427.70 20391.00 20403.25 20402.31 20395.95 20404.0428 36.7000P_total_sludge per day = kg SS/d 2918.20 2913.00 2914.75 2914.62 2913.71 2914.8556 5.2000
Aeration energy = kWh/d 6476.00 6476.00 6476.11 6476.11 6476.11 6476.0668 0.1120
Pumping energy = kWh/d 2967.00 2967.00 2966.76 2966.76 2966.76 2966.8560 0.2400
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.17 0.60 0.59 0.59 0.58 0.5057 0.4304
i.e.: % of the time 2.38 8.53 8.48 8.48 8.25 7.2244 6.1500
The limit was violated at: occasions 3 4 4 4 4 3.8000 1
The max effluent S_NH level
(4 g N/m3)was violated during: d 4.47 4.55 4.51 4.51 4.52 4.5104 0.0840i.e.: % of the time 63.80 65.00 64.43 64.43 64.50 64.4329 1.2000
The limit was violated at: occasions 6 7 7 7 7 6.8000 1
The max effluent TSS level
(30 g SS/m3)
was violated during: d 0.00 0.01 0.01 0.01 0.01 0.0084 0.0105i.e.: % of the time 0.00 0.15 0.15 0.15 0.15 0.1198 0.1500The limit was violated at: occasions 0 1 1 1 1 0.8000 17110.3 BASIC CONTROL STRATEGY RESULTS
Table 10.5 : Dynamic (closedloop – i.e. basic control strategy operational) results generated with the dry weather  file
by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 18061.33 18061.00 18061.26 18085.60 18064.24 18066.69 24.60
S_I = g COD/m3 30.0000 30.0000 30.0000 30.0000 30.0000 30.0000 0.0000
S_S = g COD/m3 0.8726 0.8880 0.8817 0.8852 0.8779 0.8811 0.0154
X_I = g COD/m3 4.5812 4.5700 4.5718 4.5735 4.5725 4.5738 0.0112X_S = g COD/m3 0.2018 0.2020 0.2007 0.2017 0.1993 0.2011 0.0027X_BH = g COD/m3 10.2315 10.2000 10.2308 10.2303 10.2110 10.2207 0.0315
X_BA = g COD/m3 0.5788 0.5800 0.5783 0.5723 0.5781 0.5775 0.0077
X_P = g COD/m3 1.7569 1.7600 1.7548 1.7556 1.7545 1.7564 0.0055S_O = g (-COD)/m3 1.9902 n/a 1.9997 1.9867 1.9989 1.9939 0.0130
S_NO = g N/m3 12.4125 13.2000 12.4394 12.6486 12.3351 12.6071 0.8649
S_NH = g N/m3 2.5285 2.4500 2.5287 2.5893 2.5020 2.5197 0.1393S_ND = g N/m3 0.7012 0.7130 0.7066 0.7083 0.7052 0.7069 0.0118X_ND = g N/m3 0.0145 0.0146 0.0144 0.0145 0.0143 0.0145 0.0003
S_ALK = kmol HCO3/m3 n/a 3.9800 4.0387 4.0287 n/a 4.0158 0.0587
TSS = g SS/m3 13.0126 12.9800 13.0023 13.0000 12.9866 12.9963 0.0326N_TKN = g N/m3 4.4892 4.4200 4.4940 4.5561 4.4643 4.4847 0.1361
N_tot = g N/m3 16.9017 17.6000 16.9334 17.2047 16.7994 17.0878 0.8006
COD_tot = g COD/m3 48.2227 48.2400 48.2181 48.2185 48.1934 48.2185 0.0466BOD5_tot = g/m3 2.7550 2.7600 2.7567 2.7563 2.7508 2.7558 0.0092
Effluent average loads
S_I = kg COD/d 541.8400 542.0000 541.8378 542.5690 541.9273 542.0348 0.7312
S_S  = kg COD/d 15.7598 16.0000 17.9247 16.0094 15.8590 16.3106 2.1649X_I = kg COD/d 82.7417 82.6000 82.5732 82.7148 82.5996 82.6459 0.1685X_S = kg COD/d 3.6450 3.6500 3.6252 3.6477 3.5999 3.6335 0.0501
X_BH = kg COD/d 184.7941 185.0000 184.7804 185.0220 184.4535 184.8100 0.5685
X_BA = kg COD/d 10.4537 10.5000 10.4439 10.3498 10.4433 10.4381 0.1502X_P = kg COD/d 31.7321 31.7000 31.6946 31.7503 31.6940 31.7142 0.0563S_O = kg (-COD)/d 35.9453 n/a 36.1178 35.9303 36.1080 36.0253 0.1875
S_NO = kg N/d 224.1856 238.0000 224.6717 228.7580 222.8250 227.6881 15.1750
S_NH = kg N/d 45.6680 44.2000 45.6707 46.8300 45.1966 45.5131 2.6300S_ND = kg N/d 12.6638 12.9000 12.7621 12.8100 12.7396 12.7751 0.2362
X_ND = kg N/d 0.2614 0.2630 0.2603 0.2620 0.2585 0.2611 0.0045
S_ALK = kmol HCO3/d n/a 71.9000 72.9446 72.8614 n/a 72.5687 1.0446TSS = kg N/d 235.0254 234.5000 234.8380 235.1140 234.5927 234.8140 0.6140N_TKN = kg N/d 81.0816 79.8300 81.1672 82.3997 80.6441 81.0245 2.5697
N_tot = kg N/d 305.2672 317.9000 305.8388 311.1570 303.4691 308.7264 14.4309
COD_tot = kg COD/d 870.9663 871.2000 870.8798 872.0640 870.5766 871.1373 1.4874BOD5_tot = kg/d 49.7582 49.8500 49.7891 49.8498 49.6910 49.7876 0.1590
Performance Indices
I.Q.-index = kg poll.units/d 42042.81 42000.00 42042.81 42042.81 42042.82 42034.25 42.82
E.Q.-index = kg poll.units/d 7545.88 7760.00 7556.91 7665.14 7501.02 7605.79 258.98
P_sludge = kg SS 17104.30 17087.00 17085.46 17080.74 17142.68 17100.03 61.94
P_sludge per day = kg SS/d 2443.50 2441.00 2440.78 2440.11 2448.95 2442.87 8.84P_sludge_eff = kg SS 1645.20 1631.00 1643.87 1645.80 1642.15 1641.60 14.80
P_sludge_eff per day = kg SS/d 235.00 233.00 234.84 235.11 234.59 234.51 2.11
P_total_sludge = kg SS 18749.50 18718.00 18729.32 18726.54 18784.82 18741.64 66.82P_total_sludge per day = kg SS/d 2678.50 2674.00 2675.62 2675.22 2683.55 2677.38 9.55
Aeration energy = kWh/d 7241.00 7262.00 7241.27 7253.21 7231.50 7245.80 30.50
Pumping energy = kWh/d 1524.00 1328.00 1488.14 1430.31 1521.88 1458.47 196.00
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.99 2.03 1.28 1.46 1.12 1.38 1.04i.e.: % of the time 14.14 29.00 18.30 20.83 16.05 19.66 14.86
The limit was violated at: occasions 5 9 7 7 7 7.00 4
The max effluent S_NH level
(4 g N/m3)
was violated during: d 1.21 1.16 1.21 1.30 1.20 1.22 0.14i.e.: % of the time 17.30 16.60 17.26 18.60 17.10 17.37 2.00The limit was violated at: occasions 5 5 5 6 5 5.20 172Table 10.5 (cont’d): Dynamic (closedloop – i.e. basic control strategy operational) results generated with the dry
weather file by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Nitrate controller for second anoxic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) m3/d/(g N/m3) 7500 5040 15000 10000 10000 9508.00 9960.00
Integral time constant (Ti) d 0.0125 0.007 0.05 0.08 0.01 0.03 0.07
Anti-windup time constant (Tt) d not used not used 0.03 not used not used
Controlled variable, SNO2
Setpoint g N/m3 1 1 1 1 1 1.00 0.00
Integral of absolute error (IAE) (g N/m3)*d 0.1851641 4.04 1.4818 2.57325 0.8287897 1.82 3.85Integral of square error (ISE) (g N/m3)**2*d 0.0662959 3.35 0.59844 1.61783 0.1892283 1.16 3.28Max dev from setpoint (max e) g N/m3 0.8827 1.59 0.88729 0.9 0.6515534 0.98 0.94
Standard deviation of error (std e) g N/m3 0.1790472 0.38 0.29234 0.480315 0.1644458 0.30 0.32
Variance of error (var e) (g N/m3)**2 0.0320579 0.144 0.085463 0.230702 0.0270424 0.10 0.20
Manipulated variable (MV), Qintrec
Max deviation of MV (max-min) m3/d 49531 92232 36691.4502 30887.5 46724.644 51213.32 61344.50
Max dev in MV (delta) m3/d 10677 12000 8077.7893 6218.02 9880.633 9370.69 5781.98Std deviation of MV (delta) m3/d 1622.53 285.6 1661.9725 1741.16 1554.0036 1373.05 1455.56
Variance of MV (delta) (m3/d)**2 2632603.5 81567 2762152 3031000 2414927.1 2184450 2949433
Oxygen controller for third aerobic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) 1/d/(g (-COD)/m3) 20.8 16.8 500 100 5000 1127.52 4983.20
Integral time constant (Ti) d 0.002 0.0025 0.001 0.01 0.05 0.01 0.05Anti-windup time constant (Tt) d not used not used 0.0002 not used not used 0.00 0.00
Controlled variable, SO5
Setpoint g (-COD)/m3 2 2 2 2 2 2.00 0.00Integral of absolute error (IAE) (g (-COD)/m3)*d 0.0451658 0.454 0.0075065 0.302823 0.0266098 0.17 0.45
Integral of square error (ISE) (g (-COD)/m3)**2*d 0.0049911 0.067 1.74E-05 0.029381 0.000191 0.02 0.07
Max dev from setpoint (max e) g (-COD)/m3 0.3408 0.41 0.0069017 0.259716 0.0175857 0.21 0.40Standard deviation of error (std e) g (-COD)/m3 0.0543653 0.0731 0.0015756 0.064787 0.005226 0.04 0.07Variance of error (var e) (g (-COD)/m3)**2 0.0029556 0.0053 2.4824E-06 0.004197 2.731E-05 0.00 0.01
Manipulated variable (MV), Kla5
Max deviation of MV (max-min) 1/d 186.737 240 186.4117 186.99 182.00036 196.43 58.00
Max dev in MV (delta) 1/d 36.229 12 36.7723 29.7157 38.65462 30.67 26.65
Std deviation of MV (delta) 1/d 5.9096592 0.41 5.7745 6.92972 5.9642918 5.00 6.52Variance of MV (delta) (1/d)**2 34.924072 168 33.3452 48.021 35.572777 63.97 134.6573Table 10.6 : Dynamic (closedloop – i.e. basic control strategy operational) results generated with the rain weather file
by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 23808.18 23810.00 23808.12 23833.10 23830.46 23817.97 24.98
S_I = g COD/m3 22.8323 22.8000 22.8387 22.8450 22.8456 22.8323 0.0456
S_S = g COD/m3 1.0238 1.0500 1.0296 1.0372 1.0241 1.0329 0.0262X_I = g COD/m3 5.6352 5.6300 5.6271 5.6277 5.6239 5.6288 0.0113X_S = g COD/m3 0.3127 0.3190 0.3110 0.3138 0.3082 0.3130 0.0108
X_BH = g COD/m3 12.8760 12.9000 12.8810 12.8758 12.8497 12.8765 0.0503
X_BA = g COD/m3 0.6854 0.6890 0.6856 0.6777 0.6851 0.6846 0.0114X_P = g COD/m3 2.0624 2.0600 2.0610 2.0611 2.0597 2.0608 0.0027
S_O = g (-COD)/m3 1.9932 n/a 1.9998 1.9910 1.9992 1.9958 0.0088
S_NO = g N/m3 9.1307 9.7400 9.1748 9.3130 9.0782 9.2873 0.6618S_NH = g N/m3 3.2586 3.1600 3.2172 3.2872 3.1952 3.2236 0.1272S_ND = g N/m3 0.7842 0.8000 0.7875 0.7907 0.7865 0.7898 0.0158
X_ND = g N/m3 0.0216 0.0221 0.0215 0.0217 0.0213 0.0216 0.0008
S_ALK = kmol HCO3/m3 n/a 4.8200 4.8589 4.8540 n/a 4.8443 0.0389TSS = g SS/m3 16.1788 16.2000 16.1744 16.1671 16.1450 16.1731 0.0550N_TKN = g N/m3 5.6112 5.5300 5.5729 5.6453 5.5468 5.5812 0.1153
N_tot = g N/m3 14.7420 15.2700 14.7477 14.9582 14.6250 14.8686 0.6450
COD_tot = g COD/m3 45.4279 45.4400 45.4341 45.4383 45.3963 45.4273 0.0437BOD5_tot = g/m3 3.4533 3.4650 3.4555 3.4551 3.4461 3.4550 0.0189
Effluent average loads
S_I = kg COD/d 543.5964 544.0000 543.7459 544.4670 544.4212 544.0461 0.8706
S_S  = kg COD/d 24.3751 25.0000 24.5120 24.7192 24.4038 24.6020 0.6249X_I = kg COD/d 134.1647 134.0000 133.9717 134.1250 134.0204 134.0564 0.1930
X_S = kg COD/d 7.4449 7.6000 7.4050 7.4798 7.3455 7.4550 0.2545
X_BH = kg COD/d 306.5551 307.0000 306.6719 306.8700 306.2145 306.6623 0.7855X_BA = kg COD/d 16.3182 16.4000 16.3236 16.1505 16.3265 16.3038 0.2495X_P = kg COD/d 49.1021 49.2000 49.0695 49.1233 49.0827 49.1155 0.1305
S_O = kg (-COD)/d 47.4548 n/a 47.6122 47.4520 47.6427 47.5404 0.1907
S_NO = kg N/d 217.3860 232.0000 218.4344 221.9580 216.3371 221.2231 15.6629S_NH = kg N/d 77.5822 75.3000 76.5961 78.3443 76.1428 76.7931 3.0443
S_ND = kg N/d 18.6708 19.1000 18.7496 18.8455 18.7430 18.8218 0.4292
X_ND = kg N/d 0.5143 0.5270 0.5122 0.5176 0.5079 0.5158 0.0191S_ALK = kmol HCO3/d n/a 115.0000 118.6819 115.6870 n/a 116.4563 3.6819TSS = kg N/d 385.1882 385.6500 385.0813 385.3130 384.7422 385.1949 0.9078
N_TKN = kg N/d 133.5932 131.6700 132.6800 134.5440 132.1832 132.9341 2.8740
N_tot = kg N/d 350.9792 364.5800 351.1144 356.5020 348.5203 354.3392 16.0597COD_tot = kg COD/d 1081.5565 1082.1000 1081.6997 1082.940 1081.8146 1082.0222 1.3835
BOD5_tot = kg/d 82.2158 82.5010 82.2682 82.3446 82.1217 82.2903 0.3793
Performance Indices
I.Q.-index = kg poll.units/d 42042.81 42000.00 42042.81 42042.81 42042.82 42034.25 42.82
E.Q.-index = kg poll.units/d 9035.95 9250.00 9038.69 9148.28 8976.96 9089.98 273.04
P_sludge = kg SS 16518.30 16492.00 16504.47 16499.89 16629.17 16528.77 137.17
P_sludge per day = kg SS/d 2359.80 2356.00 2357.78 2357.13 2375.60 2361.26 19.60
P_sludge_eff = kg SS 2696.30 2695.00 2695.57 2697.18 2693.20 2695.45 3.98
P_sludge_eff per day = kg SS/d 385.20 385.00 385.08 385.31 384.74 385.07 0.57P_total_sludge = kg SS 19214.60 19187.00 19200.04 19197.07 19322.37 19224.22 135.37P_total_sludge per day = kg SS/d 2744.90 2741.00 2742.86 2742.44 2760.34 2746.31 19.34
Aeration energy = kWh/d 7168.00 7198.00 7169.77 7179.71 7159.81 7175.06 38.19
Pumping energy = kWh/d 2009.00 1647.00 1927.53 1840.03 2004.24 1885.56 362.00
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.42 1.16 0.79 0.91 0.68 0.79 0.74
i.e.: % of the time 5.95 16.60 11.31 12.95 9.75 11.31 10.65
The limit was violated at: occasions 3 7 5 5 5 5.00 4
The max effluent S_NH level
(4 g N/m3)was violated during: d 2.00 1.86 1.90 1.96 1.84 1.91 0.16i.e.: % of the time 28.60 26.60 27.08 27.98 26.25 27.30 2.35
The limit was violated at: occasions 8 8 8 8 8 8.00 074Table 10.6 (cont’d): Dynamic (closedloop – i.e. basic control strategy operational) results generated with the rain
weather file by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Nitrate controller for second anoxic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) m3/d/(g N/m3) 7500 5040 15000 10000 10000 9508.00 9960.00
Integral time constant (Ti) d 0.0125 0.007 0.05 0.08 0.01 0.03 0.07
Anti-windup time constant (Tt) d not used not used 0.03 not used not used
Controlled variable, SNO2
Setpoint g N/m3 1 1 1 1 1 1.00 0.00
Integral of absolute error (IAE) (g N/m3)*d 0.21702 4.375 1.8182 2.57325 0.9874789 1.99 4.16Integral of square error (ISE) (g N/m3)**2*d 0.0903118 4.14 0.84205 1.61783 0.278571 1.39 4.05Max dev from setpoint (max e) g N/m3 0.920014 2.51 0.9092 0.9 0.732948 1.19 1.78
Standard deviation of error (std e) g N/m3 0.2080349 0.445 0.3468 0.480315 0.19955 0.34 0.28
Variance of error (var e) (g N/m3)**2 0.0432785 0.198 0.12027 0.230702 0.0398202 0.13 0.19
Manipulated variable (MV), Qintrec
Max deviation of MV (max-min) m3/d 92232 46845 77424.58 70176.3 92232 75781.98 45387.00
Max dev in MV (delta) m3/d 10135 12000 8897.2944 6157.58 9998.969 9437.77 5842.42Std deviation of MV (delta) m3/d 1769.7859 288 1641.798 1754.69 1764.9688 1443.85 1481.79
Variance of MV (delta) (m3/d)**2 3132142.1 82944 2695501 3078930 3115114.9 2420926 3049198
Oxygen controller for third aerobic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) 1/d/(g (-COD)/m3) 20.8 16.8 500 100 5000 1127.52 4983.20
Integral time constant (Ti) d 0.002 0.0025 0.001 0.01 0.05 0.01 0.05Anti-windup time constant (Tt) d not used not used 0.0002 not used not used 0.00 0.00
Controlled variable, SO5
Setpoint g (-COD)/m3 2 2 2 2 2 2.00 0.00Integral of absolute error (IAE) (g (-COD)/m3)*d 0.0389263 0.395 0.0069977 0.262958 0.0231699 0.15 0.39
Integral of square error (ISE) (g (-COD)/m3)**2*d 0.0037126 0.052 5.83E-05 0.022519 0.0001474 0.02 0.05
Max dev from setpoint (max e) g (-COD)/m3 0.3068 0.386 0.065537 0.249905 0.0173045 0.21 0.37Standard deviation of error (std e) g (-COD)/m3 0.0469105 0.0654 0.0028853 0.056719 0.0045911 0.04 0.06Variance of error (var e) (g (-COD)/m3)**2 0.0022006 0.00428 8.33E-06 0.00321 2.11E-05 0.00 0.00
Manipulated variable (MV), Kla5
Max deviation of MV (max-min) 1/d 189.993 240 220.2254 189.837 182.44765 204.50 57.55
Max dev in MV (delta) 1/d 31.43 12 35.7611 28.5663 35.78925 28.71 23.79
Std deviation of MV (delta) 1/d 5.0835676 0.365 5.2715 6.06096 5.1246793 4.38 5.70Variance of MV (delta) (1/d)**2 25.84266 0.133 27.7882 36.7353 26.262338 23.35 36.6075Table 10.7 : Dynamic (closedloop – i.e. basic control strategy operational) results generated with the storm weather
file by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Effluent average concentrations based on load
Q = m3/d 20658.10 20658.00 20658.06 20685.70 20655.22 20663.02 30.48
S_I = g COD/m3 26.2761 26.3000 26.2992 26.2970 26.2984 26.2941 0.0239
S_S = g COD/m3 0.9884 1.0100 0.9995 1.0028 0.9963 0.9994 0.0216X_I = g COD/m3 5.6359 5.6400 5.6320 5.6313 5.6253 5.6329 0.0147X_S = g COD/m3 0.2911 0.2890 0.2874 0.2873 0.2857 0.2881 0.0054
X_BH = g COD/m3 11.8813 11.9000 11.9024 11.8936 11.8643 11.8883 0.0381
X_BA = g COD/m3 0.6299 0.6330 0.6311 0.6241 0.6302 0.6297 0.0089X_P = g COD/m3 1.9045 1.9100 1.9066 1.9058 1.9040 1.9062 0.0060
S_O = g (-COD)/m3 1.9895 n/a 1.9975 1.9897 1.9984 1.9938 0.0088
S_NO = g N/m3 10.5409 11.2000 10.5639 10.7358 10.4571 10.6995 0.7429S_NH = g N/m3 3.0915 3.0000 3.0529 3.1230 3.0303 3.0595 0.1230S_ND = g N/m3 0.7689 0.7850 0.7767 0.7787 0.7756 0.7770 0.0161
X_ND = g N/m3 0.0207 0.0206 0.0204 0.0204 0.0203 0.0205 0.0004
S_ALK = kmol HCO3/m3 n/a 4.4400 4.4881 4.4815 n/a 4.4699 0.0481TSS = g SS/m3 15.2571 15.2790 15.2696 15.2565 15.2322 15.2589 0.0468N_TKN = g N/m3 5.3344 5.2610 5.3051 5.3758 5.2775 5.3108 0.1148
N_tot = g N/m3 15.8753 16.4700 15.8689 16.1115 15.7346 16.0121 0.7354
COD_tot = g COD/m3 47.6073 47.6700 47.6583 47.6418 47.6042 47.6363 0.0658BOD5_tot = g/m3 3.1975 3.2100 3.2044 3.2016 3.1942 3.2015 0.0158
Effluent average loads
S_I = kg COD/d 542.8150 543.0000 543.2904 543.9700 543.1991 543.2549 1.1550
S_S  = kg COD/d 20.4181 20.8000 20.6486 20.7427 20.5786 20.6376 0.3819X_I = kg COD/d 116.4269 117.0000 116.3466 116.4860 116.1913 116.4902 0.8087
X_S = kg COD/d 6.0145 5.9800 5.9374 5.9427 5.9022 5.9554 0.1123
X_BH = kg COD/d 245.4447 246.0000 245.8812 246.0280 245.0606 245.6829 0.9674X_BA = kg COD/d 13.0132 13.1000 13.0371 12.9100 13.0160 13.0153 0.1900X_P = kg COD/d 39.3440 39.4000 39.3860 39.4223 39.3282 39.3761 0.0941
S_O = kg (-COD)/d 41.0999 n/a 41.2644 41.1577 41.2764 41.1996 0.1765
S_NO = kg N/d 217.7556 232.0000 218.2292 222.0770 215.9938 221.2111 16.0062S_NH = kg N/d 63.8652 62.0000 63.0676 64.6016 62.5913 63.2251 2.6016
S_ND = kg N/d 15.8840 16.2000 16.0454 16.1075 16.0208 16.0515 0.3160
X_ND = kg N/d 0.4269 0.4260 0.4219 0.4224 0.4193 0.4233 0.0076S_ALK = kmol HCO3/d n/a 91.8000 92.7160 92.7032 n/a 92.4064 0.9160TSS = kg N/d 315.1829 316.1100 315.4412 315.5920 314.6237 315.3900 1.4863
N_TKN = kg N/d 110.1989 108.6800 109.5924 111.2010 109.0087 109.7362 2.5210
N_tot = kg N/d 327.9545 340.2400 327.8216 333.2780 325.0025 330.8593 15.2375COD_tot = kg COD/d 983.4764 984.6400 984.5272 985.5020 983.2759 984.2843 2.2261
BOD5_tot = kg/d 66.0535 66.3100 66.1977 66.2270 65.9778 66.1532 0.3322
Performance Indices
I.Q.-index = kg poll.units/d 43758.11 43800.00 43758.11 43758.11 43758.12 43766.49 41.89
E.Q.-index = kg poll.units/d 8305.04 8520.00 8304.24 8414.70 8236.28 8356.05 283.72
P_sludge = kg SS 18260.00 18242.00 18239.73 18233.98 18279.50 18251.04 45.52
P_sludge per day = kg SS/d 2608.60 2606.00 2605.68 2604.85 2611.36 2607.30 6.51
P_sludge_eff = kg SS 2206.30 2198.00 2208.09 2209.14 2202.37 2204.78 11.14
P_sludge_eff per day = kg SS/d 315.20 314.00 315.44 315.59 314.62 314.97 1.59P_total_sludge = kg SS 20466.20 20440.00 20447.81 20443.12 20481.86 20455.80 41.86P_total_sludge per day = kg SS/d 2923.70 2920.00 2921.12 2920.45 2925.98 2922.25 5.98
Aeration energy = kWh/d 7284.00 7309.00 7286.06 7298.36 7276.88 7290.86 32.12
Pumping energy = kWh/d 1818.00 1498.00 1727.31 1645.26 1795.62 1696.84 320.00
The max effluent N_tot level
(18 g N/m3)was violated during: d 0.89 1.64 1.10 1.30 0.96 1.18 0.75
i.e.: % of the time 12.65 23.40 15.77 18.60 13.65 16.81 10.75
The limit was violated at: occasions 6 8 7 8 6 7.00 2
The max effluent S_NH level
(4 g N/m3)was violated during: d 1.93 1.86 1.88 1.91 1.86 1.88 0.07i.e.: % of the time 27.50 26.50 26.79 27.23 26.55 26.91 1.00
The limit was violated at: occasions 7 7 7 7 7 7.00 0
The max effluent TSS level
(30 g SS/m3)
was violated during: d 0.00 0.02 0.02 0.02 0.01 0.01 0.02i.e.: % of the time 0.00 0.30 0.30 0.30 0.15 0.21 0.30The limit was violated at: occasions 0 2 2 2 1 1.40 276Table 10.7 (cont’d): Dynamic (closedloop – i.e. basic control strategy operational) results generated with the storm
weather file by various simulation software packages.
Units GPS-X FORTRAN MATLAB/ SIMBA WEST Average max-min
Simulink
Nitrate controller for second anoxic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) m3/d/(g N/m3) 7500 5040 15000 10000 10000 9508.00 9960.00
Integral time constant (Ti) d 0.0125 0.007 0.05 0.08 0.01 0.03 0.07
Anti-windup time constant (Tt) d not used not used 0.03 not used not used
Controlled variable, SNO2
Setpoint g N/m3 1 1 1 1 1 1.00 0.00
Integral of absolute error (IAE) (g N/m3)*d 0.1851641 4.21 1.761 2.57322 1.0274977 1.95 4.02Integral of square error (ISE) (g N/m3)**2*d 0.0662959 3.84 0.83314 1.61778 0.2935525 1.33 3.77Max dev from setpoint (max e) g N/m3 0.8827 2.09 1.068 0.9 0.7086099 1.13 1.38
Standard deviation of error (std e) g N/m3 0.1790472 0.435 0.34494 0.480308 0.2048457 0.33 0.30
Variance of error (var e) (g N/m3)**2 0.0320579 0.189 0.11899 0.230695 0.2048457 0.16 0.20
Manipulated variable (MV), Qintrec
Max deviation of MV (max-min) m3/d 92232 49531 39120 57782.9 92232 66179.58 53112.00
Max dev in MV (delta) m3/d 10135 10677 12000 5861.37 9382.8445 9611.24 6138.63Std deviation of MV (delta) m3/d 1769.7859 1622.53 290 1768.08 1811.8472 1452.45 1521.85
Variance of MV (delta) (m3/d)**2 3132142.1 2632603.5 84100 3126120 3282790.3 2451551 3198690
Oxygen controller for third aerobic reactor
Controller type velocity PI disc PI
with awcont PI
with awcont PI PI
Proportional gain (K) 1/d/(g (-COD)/m3) 20.8 16.8 500 100 5000 1127.52 4983.20
Integral time constant (Ti) d 0.002 0.0025 0.001 0.01 0.05 0.01 0.05Anti-windup time constant (Tt) d not used not used 0.0002 not used not used 0.00 0.00
Controlled variable, SO5
Setpoint g (-COD)/m3 2 2 2 2 2 2.00 0.00Integral of absolute error (IAE) (g (-COD)/m3)*d 0.0451658 0.454 0.024638 0.320457 0.0601024 0.18 0.43
Integral of square error (ISE) (g (-COD)/m3)**2*d 0.0049911 0.065 3.24E-03 0.033660 0.00585 0.02 0.06
Max dev from setpoint (max e) g (-COD)/m3 0.3408 0.411 0.22993 0.259643 0.2252782 0.29 0.19Standard deviation of error (std e) g (-COD)/m3 0.0543653 0.713 0.021358 0.069344 0.0289232 0.18 0.69Variance of error (var e) (g (-COD)/m3)**2 0.0029556 0.508 4.56E-04 0.004809 8.37E-04 0.10 0.51
Manipulated variable (MV), Kla5
Max deviation of MV (max-min) 1/d 186.737 240 193.166 193.19 193.37321 201.29 53.26
Max dev in MV (delta) 1/d 36.229 12 36.7754 29.7863 39.85488 30.93 27.85
Std deviation of MV (delta) 1/d 5.9096592 0.396 5.5011 6.69429 5.684237 4.84 6.30Variance of MV (delta) (1/d)**2 34.924072 0.157 30.2624 44.8135 32.31055 28.49 44.66